<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>T.Cage&#39;s Blog</title>
  <subtitle>Make little progress day by day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-08T14:29:36.946Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>T.Cage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java集合框架的学习</title>
    <link href="http://yoursite.com/2016/11/06/%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2016/11/06/集合/</id>
    <published>2016-11-06T09:18:33.113Z</published>
    <updated>2016-11-08T14:29:36.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><ul>
<li>集合框架：为什么要出现这么多容器？</li>
</ul>
<blockquote>
<p>因为每一个容器对数据的存储方式都有不同。这个存储方式称之为：数据结构。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>集合类的由来：</li>
</ul>
<blockquote>
<p>对象用于封装特有数据，对象多了需要存储，如果对象的个数不确定。就使用集合容器进行存储。</p>
</blockquote>
<ul>
<li>集合特点：</li>
</ul>
<blockquote>
<ol>
<li>用于存储对象的容器。</li>
<li>集合的长度是可变的。</li>
<li>集合中不可以存储基本数据类型值。 </li>
</ol>
</blockquote>
<p>集合容器因为内部的数据结构不同，有多种具体容器。<br>不断的向上抽取，就形成了集合框架。<br><img src="http://i.imgur.com/WhI1dni.png" alt=""></p>
<h2 id="接口-Collection"><a href="#接口-Collection" class="headerlink" title="接口 Collection"></a>接口 Collection<e></e></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">//取交集</span></span></div><div class="line"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span>  <span class="comment">//删除与c里面元素相同的元素</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">//取并集</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">//如果此 collection 包含指定 collection 中的所有元素，则返回 true。</span></div></pre></td></tr></table></figure>
<h3 id="Iterator-iterator"><a href="#Iterator-iterator" class="headerlink" title="Iterator iterator()"></a>Iterator<e> iterator()</e></h3><p>返回在此 collection 的元素上进行迭代的迭代器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> <span class="comment">//如果仍有元素可以迭代，则返回 true。 </span></span></div><div class="line">E <span class="title">next</span><span class="params">()</span><span class="comment">//返回迭代的下一个元素。 </span></div><div class="line"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span><span class="comment">// 从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。 </span></div><div class="line"><span class="title">for</span><span class="params">(Iterator it=对象.iterator()</span>;it.hasNext();)</div><div class="line">	it.next();<span class="comment">//do something</span></div></pre></td></tr></table></figure></p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>元素是有序的可以重复，因为有索引</p>
<ul>
<li>List特有方法（凡是可以操作角标的方法都是List特有方法）</li>
<li>ListIterator是Iterator的子接口。在迭代时，不可以通过集合对象的方法操作集合中的元素，因为会发生并发异常。所以在迭代市只能用迭代器方法操作元素，但是Iterator方法是有限的，如果想要添加修改等操作需要使用子接口，ListIterator</li>
</ul>
<blockquote>
<p>注意不能用迭代器的同时使用集合的方法进行操作（并发修改），否则会抛出异常ConcurrentModificationException</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ListIterator方法：</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span></div><div class="line">          将指定的元素插入列表（可选操作）。 </div><div class="line"> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </div><div class="line">          以正向遍历列表时，如果列表迭代器有多个元素，则返回 <span class="keyword">true</span>（换句话说，如果 next 返回一个元素而不是抛出异常，则返回 <span class="keyword">true</span>）。 </div><div class="line"> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </div><div class="line">          如果以逆向遍历列表，列表迭代器有多个元素，则返回 <span class="keyword">true</span>。 </div><div class="line"> E <span class="title">next</span><span class="params">()</span> </div><div class="line">          返回列表中的下一个元素。 </div><div class="line"> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </div><div class="line">          返回对 next 的后续调用所返回元素的索引。 </div><div class="line"> E <span class="title">previous</span><span class="params">()</span> </div><div class="line">          返回列表中的前一个元素。 </div><div class="line"> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </div><div class="line">          返回对 previous 的后续调用所返回元素的索引。 </div><div class="line"> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </div><div class="line">          从列表中移除由 next 或 previous 返回的最后一个元素（可选操作）。 </div><div class="line"> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </div><div class="line">          用指定元素替换 next 或 previous 返回的最后一个元素（可选操作）。</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span><span class="comment">//在列表的指定位置插入指定元素（可选操作）。 </span></span></div><div class="line"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span><span class="comment">//添加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序</span></div><div class="line">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span><span class="comment">//返回此列表元素的列表迭代器（按适当顺序）。 </span></div><div class="line">List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><span class="comment">//返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。</span></div><div class="line">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </div><div class="line">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </div><div class="line">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></div></pre></td></tr></table></figure>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>内部是数组数据结构，是同步的。增删，查询都很慢！<br>1.2版本之前使用（当时没有集合框架）较多后被ArrayList替代<br><em>枚举就是Vector特有的取出方式，枚举和迭代器很像，因为枚举名称方法较长所以被迭代器取代了</em></p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>内部是数组数据结构，是不同步（异步）的。替代了Vector。查询的速度快。<br>1.2版本之后出现替代了Vector，默认构造元素长度是10，超出后按50%延长（Vector是100%）。<br>比较的时候需要注意equals方法的重写。</p>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>内部是链表数据结构，是不同步的。增删元素的速度很快。</p>
<ul>
<li>特有方法</li>
<li>1.6版本以后的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span></div><div class="line">         将指定元素添加到此列表的末尾（最后一个元素）。 </div><div class="line"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </div><div class="line">         在此列表的开头插入指定的元素。 </div><div class="line"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </div><div class="line">         在此列表末尾插入指定的元素。 </div><div class="line">E <span class="title">peek</span><span class="params">()</span> </div><div class="line">         获取但不移除此列表的头（第一个元素）。 </div><div class="line">E <span class="title">peekFirst</span><span class="params">()</span> </div><div class="line">         获取但不移除此列表的第一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。 </div><div class="line">E <span class="title">peekLast</span><span class="params">()</span> </div><div class="line">         获取但不移除此列表的最后一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。 </div><div class="line">E <span class="title">poll</span><span class="params">()</span> </div><div class="line">         获取并移除此列表的头（第一个元素） </div><div class="line">E <span class="title">pollFirst</span><span class="params">()</span> </div><div class="line">         获取并移除此列表的第一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。 </div><div class="line">E <span class="title">pollLast</span><span class="params">()</span> </div><div class="line">         获取并移除此列表的最后一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>元素是无序的，不可以重复<br>Set集合的功能和Collection功能是一致的</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>数据结构是哈希表，线程是非同步的<br>哈希表储存方式：先判断地址值（hashCode）是否一样，不一样就存入，一样的话继续判断是否同一个对象（equals方法），不是同一对象的话会在同地址下顺延。</p>
<blockquote>
<p>哈希表确定元素是否相同</p>
<ol>
<li>判断的是两个元素的哈希值是否相同。如果相同，在判断两个对象的内容是否相同。</li>
<li>判断哈希值相同，其实判断的是对象的hashCode的方法。判断内容相同，用的是equals方法。<br>注意：如果哈希值不同，是不需要判断equals。<br><img src="http://i.imgur.com/OnOQkYw.png" alt=""></li>
</ol>
</blockquote>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>可以对Set集合中的元素进行排序<br>自定义数据类型时需要重写Compareble里的compareTo函数</p>
<blockquote>
<p> int compareTo(T o) //比较此对象与指定对象的顺序。 </p>
</blockquote>
<p>底层数据结构是二叉树，保证元素唯一性的依据compareTo方法return0.<br>treeSet排序的第一种方式：让让元素自身具备比较性，元素需要实现CompareTo方法。这种顺序叫做自然顺序也叫默认顺序<br>TreeSet排序的第二种方式：让集合自身具备比较功能，定义一个类实现Comparator接口，覆盖compare方法。将该类对象作为参数传递给TreeSet集合的构造函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.TreeSet;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorByLength</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</div><div class="line">			</div><div class="line">			String s1 = (String)o1;</div><div class="line">			String s2 = (String)o2;</div><div class="line">			</div><div class="line">			<span class="keyword">int</span> temp = s1.length()-s2.length();</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> temp==<span class="number">0</span>? s1.compareTo(s2): temp;</div><div class="line">			<span class="comment">//基础类型都有compareTo方法</span></div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		TreeSet ts = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> ComparatorByLength());</div><div class="line"></div><div class="line">		ts.add(<span class="string">"aaaaa"</span>);</div><div class="line">		ts.add(<span class="string">"zz"</span>);</div><div class="line">		ts.add(<span class="string">"nbaq"</span>);</div><div class="line">		ts.add(<span class="string">"cba"</span>);</div><div class="line">		ts.add(<span class="string">"abc"</span>);</div><div class="line">		</div><div class="line">		Iterator it = ts.iterator();</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">			System.out.println(it.next());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合框架&quot;&gt;&lt;a href=&quot;#集合框架&quot; class=&quot;headerlink&quot; title=&quot;集合框架&quot;&gt;&lt;/a&gt;集合框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;集合框架：为什么要出现这么多容器？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因为每一个容器对数据的存储方式都有不同。这个存储方式称之为：数据结构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java String类深入理解</title>
    <link href="http://yoursite.com/2016/11/03/String%E7%B1%BB%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/11/03/String类深入理解/</id>
    <published>2016-11-03T10:20:06.408Z</published>
    <updated>2016-11-08T14:29:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>在这里主要说一些String类的细节，易忽略的点，以及面试题</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String s1=<span class="string">"abc;//s1是一个类类型变量，“abc"</span>是一个对象。</div><div class="line">s1=<span class="string">"ab"</span>;<span class="comment">//新建立了一个对象，s1指向这个对象，原来的"abc"还在堆内存中。</span></div><div class="line">String s2=<span class="keyword">new</span> String(<span class="string">"abc"</span>);<span class="comment">//不使用！建立了两个对象</span></div><div class="line">String s3=<span class="string">"abc"</span>;<span class="comment">//与s1共用一个对象，或者说s1,s3指向同一对象，不会再开辟空间。</span></div></pre></td></tr></table></figure>
<blockquote>
<p>字符串的最大特点：一旦被初始化就不可以改变。<br>字符串比较使用.equals()，不使用c语言的==。</p>
</blockquote>
<h2 id="用StringBuffer对字符串进行增删改查"><a href="#用StringBuffer对字符串进行增删改查" class="headerlink" title="用StringBuffer对字符串进行增删改查"></a>用StringBuffer对字符串进行增删改查</h2><h3 id="StringBuffer特点"><a href="#StringBuffer特点" class="headerlink" title="StringBuffer特点"></a>StringBuffer特点</h3><ol>
<li>长度是可变化的。</li>
<li>可以字节操作多个数据类型、</li>
<li>最终会通过toString方法变成字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">()</span><span class="comment">//后面追加</span></span></div><div class="line">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </div><div class="line">StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//删除某个字符</span></div><div class="line">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span> c)</span><span class="comment">//第二个参数有各种基础类型重载</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span><span class="comment">//修改某个字符</span></div><div class="line">StringBuffer <span class="title">reverse</span><span class="params">()</span><span class="comment">//反转</span></div><div class="line">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span><span class="comment">//替换</span></div><div class="line"><span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> <span class="comment">//尝试减少用于字符序列的存储空间。</span></div></pre></td></tr></table></figure>
<h2 id="使用StringBuilder代替StringBuffer"><a href="#使用StringBuilder代替StringBuffer" class="headerlink" title="使用StringBuilder代替StringBuffer"></a>使用StringBuilder代替StringBuffer</h2><p>在SDK1.5后出现了StringBuilder类（），使用方法和StringBuffer相同，开发时单线程使用StringBuilder，多线程使用StringBuffer提高开发效率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里主要说一些String类的细节，易忽略的点，以及面试题&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java单例设计模式</title>
    <link href="http://yoursite.com/2016/11/01/Java%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/11/01/Java单例设计模式/</id>
    <published>2016-11-01T06:47:51.744Z</published>
    <updated>2016-11-08T14:30:03.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>单例设计模式 懒汉式/饿汉式</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span>//懒汉式的（多线程）安全定义方法（面试常考）</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Single s=<span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(a==<span class="keyword">null</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">synchronized</span>(Single.class)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(s==<span class="keyword">null</span>)</div><div class="line">					s=<span class="keyword">new</span> Single();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">&#125;<span class="comment">//懒汉式用于延迟加载</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span>//饿汉式（开发中常用）</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single s=<span class="keyword">new</span> Single();</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单例设计模式 懒汉式/饿汉式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程的学习</title>
    <link href="http://yoursite.com/2016/11/01/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/11/01/Java多线程学习/</id>
    <published>2016-11-01T06:13:21.281Z</published>
    <updated>2016-11-08T14:17:03.633Z</updated>
    
    <content type="html"><![CDATA[<p>进程：正在执行的程序，有一个执行顺序，顺序是一个执行路径， 或者叫控制单元<br>线程：进程中独立的控制单元，至少有一个<br>JAVA vm 启动时有一个进程java.exe<br>至少有一个线程存在main函数中叫主线程。</p>
<blockquote>
<p>jvm 启动不只一个线程，还有负责垃圾回收处理机制的线程。</p>
</blockquote>
<a id="more"></a>
<h2 id="java-lang-Thread"><a href="#java-lang-Thread" class="headerlink" title="java.lang.Thread"></a>java.lang.Thread</h2><ol>
<li>创建线程第一种方式是继承Thread</li>
<li>并复写run()方法（目的是将自定义的代码存储在run()方法中）</li>
<li>调用改线程的start()方法（因为对象.run()仅仅是调用方法，线程创建了，并没有运行）</li>
</ol>
<h2 id="多线程具有随机性"><a href="#多线程具有随机性" class="headerlink" title="多线程具有随机性"></a>多线程具有随机性</h2><p>多个线程获取cpu的执行权，每一个时间只能一个程序占用cpu（多核除外）</p>
<ul>
<li>几种状态sleep(),wait(),notify(),stop(),和一个特殊状态：阻塞–<em>具备运行资格，但没有执行权</em></li>
<li><img src="http://i.imgur.com/je9JJLi.png" alt=""></li>
</ul>
<h2 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h2><p>默认名称为Thread-编号<br>.getName()获得线程名称，.setName()设置线程名称，Thread.currentThread()获得当前线程</p>
<h2 id="java-lang-Runnable接口"><a href="#java-lang-Runnable接口" class="headerlink" title="java.lang.Runnable接口"></a>java.lang.Runnable接口</h2><ol>
<li>创建线程第二种方式 实现Runnable方法</li>
<li>覆盖Runnable接口的run方法</li>
<li>通过Thread类建立线程对象</li>
<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数</li>
<li>调用Thread类的static方法开启线程并调用Runnable接口子类的run方法</li>
</ol>
<blockquote>
<p>实现相比第一种方式的好处： Runnable避免了单继承的局限性，在定义线程时，尽量使用接口实现的方式。<br>区别：继承线程代码存放在Thread子类的run方法中<br>实现Runnable线程代码存放在接口子类的run方法中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//do something</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		Ticket t= <span class="keyword">new</span> Ticket();</div><div class="line">		Thread t1=<span class="keyword">new</span> Thread(t);</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread(t);</div><div class="line">		t1.start();</div><div class="line">		t1.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多线程安全问题"><a href="#多线程安全问题" class="headerlink" title="多线程安全问题"></a>多线程安全问题</h2><p>–1.<em>使用同步代码块</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(对象)&#123;</div><div class="line">	<span class="comment">//需要被同步的代码块</span></div><div class="line">	<span class="comment">//只能有一个线程进入，执行完之后才能进下一个进程</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>好处：解决了多线程的安全问题<br>弊端：多个线程都需要判断锁，较为消耗资源</p>
</blockquote>
<p>–2.<em>同步函数</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>同步函数使用的锁是哪一个？<br>–<em>函数需要被对象调用，那函数都有一个所属对象的引用，就是this。</em></li>
<li>如果同步函数被静态修饰后用的锁不是this，尤为静态方法中没有this<ul>
<li>静态进内存时，内存中没有本类对象，但是一定有该类对应的字节码文件对象。类名.class 该类的类型是Class(静态同步方法)<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(类名.class)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//需要被同步的代码块</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>–3.<em>防止死锁</em></p>
<blockquote>
<p>多线程使用同一个锁，防止互相嵌套</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span>  <span class="keyword">int</span> num = <span class="number">100</span>;</div><div class="line">	Object obj = <span class="keyword">new</span> Object();</div><div class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">synchronized</span>(obj)</div><div class="line">				&#123;</div><div class="line">					show();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">				<span class="keyword">this</span>.show();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">synchronized</span>(obj)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(num&gt;<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;&#125;</div><div class="line">				</div><div class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">".....sale...."</span>+num--);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		Ticket t = <span class="keyword">new</span> Ticket();</div><div class="line"><span class="comment">//		System.out.println("t:"+t);</span></div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(t);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(t);</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		<span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</div><div class="line">		t.flag = <span class="keyword">false</span>;</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p>–<em>多个线程操作统一资源，但操作动作不同</em></p>
<h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><p>–<em>涉及的方法</em>：</p>
<p>1，wait(): 让线程处于冻结状态，被wait的线程会被存储到线程池中。<br>2，notify():唤醒线程池中一个线程(任意).<br>3，notifyAll():唤醒线程池中的所有线程。</p>
<p>这些方法都必须定义在同步中。</p>
<blockquote>
<p>因为这些方法是用于操作线程状态的方法。<br>必须要明确到底操作的是哪个锁上的线程。</p>
</blockquote>
<p>为什么操作线程的方法wait notify notifyAll定义在了Object类中？ </p>
<blockquote>
<p>因为这些方法是监视器的方法。监视器其实就是锁。<br>锁可以是任意的对象，任意的对象调用的方式一定定义在Object类中。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String sex;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name,String sex)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			<span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.sex = sex;</div><div class="line">		flag = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">this</span>.notify();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!flag)</div><div class="line">			<span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</div><div class="line">		System.out.println(name+<span class="string">"...+...."</span>+sex);</div><div class="line">		flag = <span class="keyword">false</span>;</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输入</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	Resource r ;</div><div class="line"><span class="comment">//	Object obj = new Object();</span></div><div class="line">	Input(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(x==<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				r.set(<span class="string">"mike"</span>,<span class="string">"nan"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				r.set(<span class="string">"丽丽"</span>,<span class="string">"女女女女女女"</span>);</div><div class="line">			&#125;</div><div class="line">			x = (x+<span class="number">1</span>)%<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;<span class="comment">//输出</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	Resource r;</div><div class="line"><span class="comment">//	Object obj = new Object();</span></div><div class="line">	Output(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			r.out();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ResourceDemo3</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//创建资源。</span></div><div class="line">		Resource r = <span class="keyword">new</span> Resource();</div><div class="line">		<span class="comment">//创建任务。</span></div><div class="line">		Input in = <span class="keyword">new</span> Input(r);</div><div class="line">		Output out = <span class="keyword">new</span> Output(r);</div><div class="line">		<span class="comment">//创建线程，执行路径。</span></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(in);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(out);</div><div class="line">		<span class="comment">//开启线程</span></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多于两个线程的进程间通信"><a href="#多于两个线程的进程间通信" class="headerlink" title="多于两个线程的进程间通信"></a>多于两个线程的进程间通信</h2><p>–自我理解：将两个线程的if(flag)改为while(flag)【让唤醒的线程再一次判断标记】,notify()改为notifyAll()【notify()可能只会唤醒本方线程（导致所有线程等待）】</p>
<blockquote>
<p>notify()往往唤醒的是线程池中的第一个，所以用flag标记和notifyAll()配合使用解决。</p>
</blockquote>
<h2 id="JDK1-5后新特性lock"><a href="#JDK1-5后新特性lock" class="headerlink" title="JDK1.5后新特性lock"></a>JDK1.5后新特性lock</h2><p>–jdk1.5以后将同步和锁封装成了对象。<br>并将操作锁的隐式方式定义到了该对象中，<br>将隐式动作变成了显示动作。</p>
<blockquote>
<p>Lock接口(替代synchronized)： 出现替代了同步代码块或者同步函数。</p>
</blockquote>
<p>将同步的隐式锁操作变成现实锁操作。同时更为灵活。可以一个锁上加上多组监视器。</p>
<blockquote>
<p>Condition接口：出现替代了Object中的wait notify notifyAll方法。</p>
</blockquote>
<p>将这些监视器方法单独进行了封装，变成Condition监视器对象。可以使用多个condition与任意锁进行组合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lock();<span class="comment">//获取锁。</span></div><div class="line">unlock();<span class="comment">//释放锁，通常需要定义finally代码块中。</span></div><div class="line"></div><div class="line">await();<span class="comment">//替代wait()</span></div><div class="line">signal();<span class="comment">//替代notify();</span></div><div class="line">signalAll();<span class="comment">//替代notifyAll();</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="comment">//	创建一个锁对象。</span></div><div class="line">	Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">	<span class="comment">//通过已有的锁获取该锁上的监视器对象。</span></div><div class="line"><span class="comment">//	Condition con = lock.newCondition();</span></div><div class="line"></div><div class="line">	<span class="comment">//通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者。</span></div><div class="line">	Condition producer_con = lock.newCondition();</div><div class="line">	Condition consumer_con = lock.newCondition();</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span><span class="comment">//  t0 t1</span></span></div><div class="line">	&#123;</div><div class="line">		lock.lock();</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span>(flag)</div><div class="line"><span class="comment">//			try&#123;lock.wait();&#125;catch(InterruptedException e)&#123;&#125;//   t1    t0</span></div><div class="line">			<span class="keyword">try</span>&#123;producer_con.await();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;<span class="comment">//   t1    t0</span></div><div class="line">		</div><div class="line">			<span class="keyword">this</span>.name = name + count;<span class="comment">//烤鸭1  烤鸭2  烤鸭3</span></div><div class="line">			count++;<span class="comment">//2 3 4</span></div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者5.0..."</span>+<span class="keyword">this</span>.name);<span class="comment">//生产烤鸭1 生产烤鸭2 生产烤鸭3</span></div><div class="line">			flag = <span class="keyword">true</span>;</div><div class="line"><span class="comment">//			notifyAll();</span></div><div class="line"><span class="comment">//			con.signalAll();</span></div><div class="line">			consumer_con.signal();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span></div><div class="line">		&#123;</div><div class="line">			lock.unlock();<span class="comment">//finally用来释放资源</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span><span class="comment">// t2 t3</span></span></div><div class="line">	&#123;</div><div class="line">		lock.lock();</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span>(!flag)</div><div class="line"><span class="comment">//			try&#123;this.wait();&#125;catch(InterruptedException e)&#123;&#125;	//t2  t3</span></div><div class="line">			<span class="keyword">try</span>&#123;cousumer_con.await();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;	<span class="comment">//t2  t3</span></div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者.5.0......."</span>+<span class="keyword">this</span>.name);<span class="comment">//消费烤鸭1</span></div><div class="line">			flag = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//			notifyAll();</span></div><div class="line"><span class="comment">//			con.signalAll();</span></div><div class="line">			producer_con.signal();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span></div><div class="line">		&#123;</div><div class="line">			lock.unlock();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Resource r;</div><div class="line">	Producer(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			r.set(<span class="string">"烤鸭"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Resource r;</div><div class="line">	Consumer(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			r.out();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProducerConsumerDemo2</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		Resource r = <span class="keyword">new</span> Resource();</div><div class="line">		Producer pro = <span class="keyword">new</span> Producer(r);</div><div class="line">		Consumer con = <span class="keyword">new</span> Consumer(r);</div><div class="line"></div><div class="line">		Thread t0 = <span class="keyword">new</span> Thread(pro);</div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(pro);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(con);</div><div class="line">		Thread t3 = <span class="keyword">new</span> Thread(con);</div><div class="line">		t0.start();</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		t3.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多线程总结"><a href="#多线程总结" class="headerlink" title="多线程总结"></a>多线程总结</h2><h3 id="1，进程和线程的概念。"><a href="#1，进程和线程的概念。" class="headerlink" title="1，进程和线程的概念。"></a>1，进程和线程的概念。</h3><pre><code>|--进程：
|--线程：
</code></pre><h3 id="2，jvm中的多线程体现。"><a href="#2，jvm中的多线程体现。" class="headerlink" title="2，jvm中的多线程体现。"></a>2，jvm中的多线程体现。</h3><pre><code>|--主线程，垃圾回收线程，自定义线程。以及他们运行的代码的位置。
</code></pre><h3 id="3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？"><a href="#3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？" class="headerlink" title="3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？"></a>3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？</h3><pre><code>|--当需要多部分代码同时执行的时候，可以使用。
</code></pre><h3 id="4，创建线程的两种方式。★★★★★"><a href="#4，创建线程的两种方式。★★★★★" class="headerlink" title="4，创建线程的两种方式。★★★★★"></a>4，创建线程的两种方式。★★★★★</h3><pre><code>|--继承Thread
    |--步骤
|--实现Runnable
    |--步骤
|--两种方式的区别？
</code></pre><h3 id="5，线程的5种状态。"><a href="#5，线程的5种状态。" class="headerlink" title="5，线程的5种状态。"></a>5，线程的5种状态。</h3><pre><code>对于执行资格和执行权在状态中的具体特点。
|--被创建：
|--运行：
|--冻结：
|--临时阻塞：
|--消亡：
</code></pre><h3 id="6，线程的安全问题。★★★★★"><a href="#6，线程的安全问题。★★★★★" class="headerlink" title="6，线程的安全问题。★★★★★"></a>6，线程的安全问题。★★★★★</h3><pre><code>|--安全问题的原因：
|--解决的思想：
|--解决的体现：synchronized
|--同步的前提：但是加上同步还出现安全问题，就需要用前提来思考。
|--同步的两种表现方法和区别：
|--同步的好处和弊端：
|--单例的懒汉式。
|--死锁。
</code></pre><h3 id="7，线程间的通信。等待-唤醒机制。"><a href="#7，线程间的通信。等待-唤醒机制。" class="headerlink" title="7，线程间的通信。等待/唤醒机制。"></a>7，线程间的通信。等待/唤醒机制。</h3><pre><code>|--概念：多个线程，不同任务，处理同一资源。 
|--等待唤醒机制。使用了锁上的 wait notify notifyAll.  ★★★★★
|--生产者/消费者的问题。并多生产和多消费的问题。  while判断标记。用notifyAll唤醒对方。 ★★★★★
|--JDK1.5以后出现了更好的方案，★★★
    Lock接口替代了synchronized  
    Condition接口替代了Object中的监视方法，并将监视器方法封装成了Condition
    和以前不同的是，以前一个锁上只能有一组监视器方法。现在，一个Lock锁上可以多组监视器方法对象。
    可以实现一组负责生产者，一组负责消费者。 
|--wait和sleep的区别。★★★★★
</code></pre><h3 id="8，停止线程的方式。"><a href="#8，停止线程的方式。" class="headerlink" title="8，停止线程的方式。"></a>8，停止线程的方式。</h3><pre><code>|--原理：.interrupt()//将线程从冻结状态强制恢复到运行状态中来
|--表现：--中断。
</code></pre><h3 id="9，线程常见的一些方法。"><a href="#9，线程常见的一些方法。" class="headerlink" title="9，线程常见的一些方法。"></a>9，线程常见的一些方法。</h3><pre><code>|--.setDaemon(true)//后台进程，主线程结束后自动结束
|--.join();//获取cpu执行权，此时主线程冻结至该线程结束
|--.setPriority(Thread.MAX_PRIORITY);//设定优先级
|--.yield();//释放执行权，不常用
|--在开发时，可以使用匿名内部类来完成局部的路径开辟。 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程：正在执行的程序，有一个执行顺序，顺序是一个执行路径， 或者叫控制单元&lt;br&gt;线程：进程中独立的控制单元，至少有一个&lt;br&gt;JAVA vm 启动时有一个进程java.exe&lt;br&gt;至少有一个线程存在main函数中叫主线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jvm 启动不只一个线程，还有负责垃圾回收处理机制的线程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Markdown优雅的写博客</title>
    <link href="http://yoursite.com/2016/10/31/MarkdownPad/"/>
    <id>http://yoursite.com/2016/10/31/MarkdownPad/</id>
    <published>2016-10-31T09:38:55.846Z</published>
    <updated>2016-11-01T08:30:08.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于Windows10-MarkdownPad2"><a href="#基于Windows10-MarkdownPad2" class="headerlink" title="基于Windows10+MarkdownPad2"></a>基于Windows10+MarkdownPad2</h3><ul>
<li>首先登陆官网下载：<a href="http://markdownpad.com/" title="MarkdownPad" target="_blank" rel="external">http://markdownpad.com/</a>    选择windows系统</li>
</ul>
<a id="more"></a>
<ul>
<li><img src="http://i.imgur.com/uakFL31.png" alt=""></li>
<li>安装后打开，会提示使用，购买注册码，输入注册码，我们点击输入注册码（enter…)<img src="http://i.imgur.com/v6zsZLf.png" alt=""></li>
<li>输入邮箱：</li>
</ul>
<blockquote>
<p>Soar360@live.com</p>
</blockquote>
<ul>
<li>授权密钥：</li>
</ul>
<blockquote>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
</blockquote>
<ul>
<li><p>地址参见：<br><a href="http://w3cboy.com/post/2014/10/MarkdownPad%E6%B3%A8%E5%86%8C%E7%A0%81/" target="_blank" rel="external">http://w3cboy.com/post/2014/10/MarkdownPad%E6%B3%A8%E5%86%8C%E7%A0%81/</a></p>
</li>
<li><p>接下来就是配置了。首先Tools&gt;Options&gt;Editor里设置为中文 <img src="http://i.imgur.com/zY7qrYQ.png" alt=""></p>
</li>
<li>然后点击Markdown markdown处理器&gt;github风格处理器（在线时可以使语法高亮）<img src="http://i.imgur.com/PZCLrkC.png" alt=""></li>
<li>最后保存并关闭就大功告成了！</li>
<li>点击标题栏的按钮可以生成相应的语法格式，这里多说一点：代码块要实现语法高亮见以下图片：<img src="http://static.oschina.net/uploads/space/2013/0313/141201_mWZs_570724.png" alt=""></li>
</ul>
<hr>
<h2 id="—-EOF—"><a href="#—-EOF—" class="headerlink" title="—-EOF—-"></a>—-EOF—-</h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基于Windows10-MarkdownPad2&quot;&gt;&lt;a href=&quot;#基于Windows10-MarkdownPad2&quot; class=&quot;headerlink&quot; title=&quot;基于Windows10+MarkdownPad2&quot;&gt;&lt;/a&gt;基于Windows10+MarkdownPad2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先登陆官网下载：&lt;a href=&quot;http://markdownpad.com/&quot; title=&quot;MarkdownPad&quot;&gt;http://markdownpad.com/&lt;/a&gt;    选择windows系统&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Other" scheme="http://yoursite.com/categories/Other/"/>
    
    
      <category term="Other" scheme="http://yoursite.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/10/30/hello-world/"/>
    <id>http://yoursite.com/2016/10/30/hello-world/</id>
    <published>2016-10-30T14:34:22.453Z</published>
    <updated>2016-11-01T06:28:31.940Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://yoursite.com/categories/Other/"/>
    
    
      <category term="Other" scheme="http://yoursite.com/tags/Other/"/>
    
  </entry>
  
</feed>
