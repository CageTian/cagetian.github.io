<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>T.Cage&#39;s Blog</title>
  <subtitle>Make little progress day by day.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-05T08:44:45.432Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>T.Cage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中时间日期的操作</title>
    <link href="http://yoursite.com/2017/12/05/Java%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/12/05/Java日期时间处理/</id>
    <published>2017-12-05T08:34:44.984Z</published>
    <updated>2017-12-05T08:44:45.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Java中时间日期的操作</p>
</blockquote>
<a id="more"></a>
<h1 id="Java中时间日期的操作"><a href="#Java中时间日期的操作" class="headerlink" title="Java中时间日期的操作"></a>Java中时间日期的操作</h1><h2 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h2><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>java.util.Date<br>很多方法已经过时，现在主要用于在Calendar类和String转换间的一个存储介质.<br><strong>所有已实现的接口：</strong><br>    Serializable, Cloneable, Comparable<date><br><strong>子类：</strong><br>    Date, Time, Timestamp<br><strong>构造方法：</strong> </date></p>
<pre><code>Date():
          分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒）。
Date(long date):
          分配 Date 对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即 1970 年 1 月 1 日 00:00:00 GMT）以来的指定毫秒数。
</code></pre><p><strong>主要方法:</strong></p>
<pre><code>boolean     after(Date when)：测试此日期是否在指定日期之后。
boolean     before(Date when)：测试此日期是否在指定日期之前。
</code></pre><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>目前用于操作时间对象的主要类，是一个抽象类没有构造方法，通过<br>静态方法<em>Calendar.getInstance()</em> 来得到Calendar对象。<br><strong>所有已实现的接口：</strong><br>    Serializable, Cloneable, Comparable<calendar><br><strong>子类：</strong><br>    GregorianCalendar<br><strong>构造方法：</strong><br>public static Calendar getInstance(TimeZone zone,Locale aLocale)</calendar></p>
<pre><code>（无参数，任意一个参数也可）使用指定时区和语言环境获得一个日历。返回的 Calendar 基于当前时间，使用了给定的时区和给定的语言环境。

参数：
    zone - 要使用的时区 （默认为系统时区）
    aLocale - 用于星期数据的语言环境 （默认为系统语言，常用的还有Locale.ENGLISH）
返回：
    一个 Calendar。 
</code></pre><p><strong>主要方法：</strong></p>
<pre><code>Date     getTime()
          返回一个表示此 Calendar 时间值（从历元至现在的毫秒偏移量）的 Date 对象。
void     setTime(Date date)
          使用给定的 Date 设置此 Calendar 的时间。
void     set(int field, int value)
          将给定的日历字段设置为给定值。
void     set(int year, int month, int date)
          设置日历字段 YEAR、MONTH 和 DAY_OF_MONTH 的值。
void     set(int year, int month, int date, int hourOfDay, int minute)
          设置日历字段 YEAR、MONTH、DAY_OF_MONTH、HOUR_OF_DAY 和 MINUTE 的值。
void     set(int year, int month, int date, int hourOfDay, int minute, int second)
          设置字段 YEAR、MONTH、DAY_OF_MONTH、HOUR、MINUTE 和 SECOND 的值。
int     get(int field)
          返回给定日历字段的值。
abstract  void     add(int field, int amount)
          根据日历的规则，为给定的日历字段添加或减去指定的时间量。
abstract  void     roll(int field, boolean up)
          在给定的时间字段上添加或减去（上/下）单个时间单元，不更改更大的字段。
void     roll(int field, int amount)
          向指定日历字段添加指定（有符号的）时间量，不更改更大的字段。
</code></pre><p><strong>注意事项：</strong></p>
<ul>
<li><p>宽松性</p>
<p>  Calendar 有两种解释日历字段的模式，即 lenient 和 non-lenient。当 Calendar 处于 lenient 模式时，它可接受比它所生成的日历字段范围更大范围内的值。当 Calendar 重新计算日历字段值，以便由 get() 返回这些值时，所有日历字段都被标准化。例如，lenient 模式下的 GregorianCalendar 将 MONTH == JANUARY、DAY_OF_MONTH == 32 解释为 February 1。</p>
<p>  当 Calendar 处于 non-lenient 模式时，如果其日历字段中存在任何不一致性，它都会抛出一个异常。例如，GregorianCalendar 总是在 1 与月份的长度之间生成 DAY_OF_MONTH 值。如果已经设置了任何超出范围的字段值，那么在计算时间或日历字段值时，处于 non-lenient 模式下的 GregorianCalendar 会抛出一个异常。</p>
</li>
<li><p>第一个星期<br>Calendar 使用两个参数定义了特定于语言环境的 7 天制星期：星期的第一天和第一个星期中的最小一天（从 1 到 7）。这些数字取自构造 Calendar 时的语言环境资源数据。还可以通过为其设置值的方法来显式地指定它们。</p>
<p>  在设置或获得 WEEK_OF_MONTH 或 WEEK_OF_YEAR 字段时，Calendar 必须确定一个月或一年的第一个星期，以此作为参考点。一个月或一年的第一个星期被确定为开始于 getFirstDayOfWeek() 的最早七天，它最少包含那一个月或一年的 getMinimalDaysInFirstWeek() 天数。第一个星期之前的各星期编号为 …、-1、0；之后的星期编号为 2、3、…。注意，get() 返回的标准化编号方式可能有所不同。例如，特定 Calendar 子类可能将某一年第 1 个星期之前的那个星期指定为前一年的第 n 个星期。</p>
</li>
<li><p>日历字段解析<br>  在计算日历字段中的日期和时间时，可能没有足够的信息用于计算（例如只有年和月，但没有日），或者可能有不一致的信息( 例如 “Tuesday, July 15, 1996”（格林威治时间）——实际上，1996 年 7 月 15 日是星期一 )。Calendar 将解析日历字段值，以便用以下方式确定日期和时间。</p>
<p>  如果日历字段值中存在任何冲突，则 Calendar 将为最近设置的日历字段提供优先权。以下是日历字段的默认组合。将使用由最近设置的单个字段所确定的最近组合。</p>
<p>  对于日期字段：</p>
<pre><code>YEAR + MONTH + DAY_OF_MONTH
YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
YEAR + DAY_OF_YEAR
YEAR + DAY_OF_WEEK + WEEK_OF_YEAR
</code></pre></li>
</ul>
<pre><code>对于时间字段：

     HOUR_OF_DAY
     AM_PM + HOUR


如果在选定的字段组合中，还有尚未设置值的任一日历字段，那么 Calendar 将使用其默认值。每个字段的默认值可能依据具体的日历系统而有所不同。例如，在 GregorianCalendar 中，字段的默认值与历元起始部分的字段值相同：即 YEAR = 1970、MONTH = JANUARY、DAY_OF_MONTH = 1，等等。

注： 对于某些特别时间的解释可能会有某些歧义，可以用下列方式解决：

    23:59 是一天中的最后一分钟，而 00:00 是下一天的第一分钟。因此，1999 年 12 月 31 日的 23:59 &lt; 2000 年 1 月 1 日的 00:00。
    尽管从历史上看不够精确，但午夜也属于 &quot;am&quot;,，中午属于 &quot;pm&quot;，所以在同一天，12:00 am ( 午夜 ) &lt; 12:01 am，12:00 pm ( 中午 ) &lt; 12:01 pm。 

日期或时间格式字符串不是日历定义的一部分，因为在运行时，用户必须能够修改或重写它们。可以使用 DateFormat 格式化日期。
</code></pre><ul>
<li><p>字段操作<br>  可以使用三种方法更改日历字段：set()、add() 和 roll()。</p>
<p>  set(f, value) 将日历字段 f 更改为 value。此外，它设置了一个内部成员变量，以指示日历字段 f 已经被更改。尽管日历字段 f 是立即更改的，但是直到下次调用 get()、getTime()、getTimeInMillis()、add() 或 roll() 时才会重新计算日历的时间值（以毫秒为单位）。因此，多次调用 set() 不会触发多次不必要的计算。使用 set() 更改日历字段的结果是，其他日历字段也可能发生更改，这取决于日历字段、日历字段值和日历系统。此外，在重新计算日历字段之后，get(f) 没必要通过调用 set 方法返回 value 集合。具体细节是通过具体的日历类确定的。</p>
<p>  示例：假定 GregorianCalendar 最初被设置为 1999 年 8 月 31 日。调用 set(Calendar.MONTH, Calendar.SEPTEMBER) 将该日期设置为 1999 年 9 月 31 日。如果随后调用 getTime()，那么这是解析 1999 年 10 月 1 日的一个暂时内部表示。但是，在调用 getTime() 之前调用 set(Calendar.DAY_OF_MONTH, 30) 会将该日期设置为 1999 年 9 月 30 日，因为在调用 set() 之后没有发生重新计算。</p>
<p>  add(f, delta) 将 delta 添加到 f 字段中。这等同于调用 set(f, get(f) + delta)，但要带以下两个调整：</p>
<pre><code>Add 规则 1。调用后 f 字段的值减去调用前 f 字段的值等于 delta，以字段 f 中发生的任何溢出为模。溢出发生在字段值超出其范围时，结果，下一个更大的字段会递增或递减，并将字段值调整回其范围内。

Add 规则 2。如果期望某一个更小的字段是不变的，但让它等于以前的值是不可能的，因为在字段 f 发生更改之后，或者在出现其他约束之后，比如时区偏移量发生更改，它的最大值和最小值也在发生更改，然后它的值被调整为尽量接近于所期望的值。更小的字段表示一个更小的时间单元。HOUR 是一个比 DAY_OF_MONTH 小的字段。对于不期望是不变字段的更小字段，无需进行任何调整。日历系统会确定期望不变的那些字段。
</code></pre><p>  此外，与 set() 不同，add() 强迫日历系统立即重新计算日历的毫秒数和所有字段。</p>
<p>  示例：假定 GregorianCalendar 最初被设置为 1999 年 8 月 31 日。调用 add(Calendar.MONTH, 13) 将日历设置为 2000 年 9 月 30 日。Add 规则 1 将 MONTH 字段设置为 September，因为向 August 添加 13 个月得出的就是下一年的 September。因为在 GregorianCalendar 中，DAY_OF_MONTH 不可能是 9 月 31 日，所以 add 规则 2 将 DAY_OF_MONTH 设置为 30，即最可能的值。尽管它是一个更小的字段，但不能根据规则 2 调整 DAY_OF_WEEK，因为在 GregorianCalendar 中的月份发生变化时，该值也需要发生变化。</p>
<p>  roll(f, delta) 将 delta 添加到 f 字段中，但不更改更大的字段。这等同于调用 add(f, delta)，但要带以下调整：</p>
<pre><code>Roll 规则。在完成调用后，更大的字段无变化。更大的字段表示一个更大的时间单元。DAY_OF_MONTH 是一个比 HOUR 大的字段。
</code></pre></li>
</ul>
<pre><code>使用模型。为了帮助理解 add() 和 roll() 的行为，假定有一个用户界面组件，它带有用于月、日、年和底层 GregorianCalendar 的递增或递减按钮。如果从界面上读取的日期为 1999 年 1 月 31 日，并且用户按下月份的递增按钮，那么应该得到什么？如果底层实现使用 set()，那么可以将该日期读为 1999 年 3 月 3 日。更好的结果是 1999 年 2 月 28 日。此外，如果用户再次按下月份的递增按钮，那么该日期应该读为 1999 年 3 月 31 日，而不是 1999 年 3 月 28 日。通过保存原始日期并使用 add() 或 roll()，根据是否会影响更大的字段，用户界面可以像大多数用户所期望的那样运行。
</code></pre><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>主要用于字符串和Date类型的相互转换<br><strong>父类：</strong></p>
<pre><code>java.lang.Object
  继承者 java.text.Format
      继承者 java.text.DateFormat
          继承者 java.text.SimpleDateFormat
</code></pre><p><strong>构造方法：</strong></p>
<pre><code>SimpleDateFormat()
          用默认的模式和默认语言环境的日期格式符号构造 SimpleDateFormat。
SimpleDateFormat(String pattern)
          用给定的模式和默认语言环境的日期格式符号构造 SimpleDateFormat。
SimpleDateFormat(String pattern, DateFormatSymbols formatSymbols)
          用给定的模式和日期符号构造 SimpleDateFormat。
SimpleDateFormat(String pattern, Locale locale)
          用给定的模式和给定语言环境的默认日期格式符号构造 SimpleDateFormat。
</code></pre><p><strong>主要方法：</strong></p>
<pre><code>Date     parse(String source)
          从给定字符串的开始解析文本，以生成一个日期。
String     format(Date date)
          将一个 Date 格式化为日期/时间字符串。
</code></pre><p><strong>注意事项：</strong><br>日期和时间格式由日期和时间模式 字符串指定。在日期和时间模式字符串中，未加引号的字母 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 被解释为模式字母，用来表示日期或时间字符串元素。文本可以使用单引号 (‘) 引起来，以免进行解释。”‘’” 表示单引号。所有其他字符均不解释；只是在格式化时将它们简单复制到输出字符串，或者在解析时与输入字符串进行匹配。<br>模式字母对应表如下：<br><img src="https://i.imgur.com/DGRVBR3.png" alt=""><br>母通常是重复的，其数量确定其精确表示：</p>
<ul>
<li><strong>Text</strong>: 对于格式化来说，如果模式字母的数量大于等于 4，则使用完全形式；否则，在可用的情况下使用短形式或缩写形式。对于解析来说，两种形式都是可接受的，与模式字母的数量无关。</li>
</ul>
<ul>
<li><strong>Number</strong>: 对于格式化来说，模式字母的数量是最小的数位，如果数位不够，则用 0 填充以达到此数量。对于解析来说，模式字母的数量被忽略，除非必须分开两个相邻字段。</li>
</ul>
<ul>
<li>Year: 如果格式器的 Calendar 是格里高利历，则应用以下规则。<pre><code>对于格式化来说，如果模式字母的数量为 2，则年份截取为 2 位数,否则将年份解释为 number。
对于解析来说，如果模式字母的数量大于 2，则年份照字面意义进行解释，而不管数位是多少。因此使用模式 &quot;MM/dd/yyyy&quot;，将 &quot;01/11/12&quot; 解析为公元 12 年 1 月 11 日。
在解析缩写年份模式（&quot;y&quot; 或 &quot;yy&quot;）时，SimpleDateFormat 必须相对于某个世纪来解释缩写的年份。这通过将日期调整为 SimpleDateFormat 实例创建之前的 80 年和之后 20 年范围内来完成。例如，在 &quot;MM/dd/yy&quot; 模式下，如果 SimpleDateFormat 实例是在 1997 年 1 月 1 日创建的，则字符串 &quot;01/11/12&quot; 将被解释为 2012 年 1 月 11 日，而字符串 &quot;05/04/64&quot; 将被解释为 1964 年 5 月 4 日。在解析时，只有恰好由两位数字组成的字符串（如 Character.isDigit(char) 所定义的）被解析为默认的世纪。其他任何数字字符串将照字面意义进行解释，例如单数字字符串，3 个或更多数字组成的字符串，或者不都是数字的两位数字字符串（例如&quot;-1&quot;）。因此，在相同的模式下， &quot;01/02/3&quot; 或 &quot;01/02/003&quot; 解释为公元 3 年 1 月 2 日。同样，&quot;01/02/-3&quot; 解析为公元前 4 年 1 月 2 日。 
</code></pre>  否则，则应用日历系统特定的形式。对于格式化和解析，如果模式字母的数量为 4 或大于 4，则使用日历特定的 long form。否则，则使用日历特定的 short or abbreviated form。</li>
</ul>
<ul>
<li><strong>Month</strong>: 如果模式字母的数量为 3 或大于 3，则将月份解释为 text；否则解释为 number。</li>
</ul>
<ul>
<li><p><strong>General time zone</strong>: 如果时区有名称，则将它们解释为 text。对于表示 GMT 偏移值的时区，使用以下语法：</p>
<pre><code>GMTOffsetTimeZone:
        GMT Sign Hours : Minutes
Sign: one of
        + -
Hours:
        Digit
        Digit Digit
Minutes:
        Digit Digit
Digit: one of
        0 1 2 3 4 5 6 7 8 9
</code></pre><p>  Hours 必须在 0 到 23 之间，Minutes 必须在 00 到 59 之间。格式是与语言环境无关的，并且数字必须取自 Unicode 标准的 Basic Latin 块。</p>
<p>  对于解析来说，RFC 822 time zones 也是可接受的。</p>
</li>
</ul>
<ul>
<li><p><strong>RFC 822 time zone</strong>: 对于格式化来说，使用 RFC 822 4-digit 时区格式：</p>
<pre><code>RFC822TimeZone:
        Sign TwoDigitHours Minutes
TwoDigitHours:
        Digit Digit
</code></pre><p>  TwoDigitHours 必须在 00 和 23 之间。其他定义请参阅 general time zones。</p>
<p>  对于解析来说，general time zones 也是可接受的。 </p>
</li>
</ul>
<p>SimpleDateFormat 还支持本地化日期和时间模式 字符串。在这些字符串中，以上所述的模式字母可以用其他与语言环境有关的模式字母来替换。SimpleDateFormat 不处理除模式字母之外的文本本地化；而由类的客户端来处理。 </p>
<h2 id="常用的方法示例"><a href="#常用的方法示例" class="headerlink" title="常用的方法示例"></a>常用的方法示例</h2><ul>
<li>日期及时间的加减计算</li>
<li>日期转字符串</li>
<li>字符串转日期</li>
<li>日期相关其他信息（星期，一年的第几天…）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Locale;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by caget on 2017/12/5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Datetime</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</div><div class="line">        </div><div class="line">        <span class="comment">//字符串转Date</span></div><div class="line">        String time=<span class="string">"2017/1/1 22:23:11"</span>;</div><div class="line">        SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>);<span class="comment">//注意月份和分钟的大小写</span></div><div class="line">        Date date=sdf.parse(time);<span class="comment">//根据模式转换为Date类型，会抛出ParseException</span></div><div class="line">        </div><div class="line">        <span class="comment">//Date转Calendar类</span></div><div class="line">        Calendar c= Calendar.getInstance(Locale.ENGLISH);<span class="comment">//使用静态方法得到默认实例</span></div><div class="line">        c.setTime(date);<span class="comment">//转换为Calendar类型进行日期相关操作</span></div><div class="line">        </div><div class="line">        <span class="comment">//Calendar转Date</span></div><div class="line">        SimpleDateFormat sdf2=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd E HH:mm:ss"</span>, Locale.ENGLISH);</div><div class="line">        Date date1=c.getTime();<span class="comment">//与date相同</span></div><div class="line">        <span class="comment">//Date再转字符串</span></div><div class="line">        String str_date1=sdf2.format(date1);</div><div class="line">        System.out.println(str_date1+</div><div class="line">                <span class="string">"\r\n weekday:"</span>+c.get(Calendar.DAY_OF_WEEK)+ <span class="comment">//周日是第一天</span></div><div class="line">                <span class="string">"\r\n days in year: "</span>+c.get(Calendar.DAY_OF_YEAR)+</div><div class="line">                <span class="string">"\r\n week in year: "</span>+c.get(Calendar.WEEK_OF_YEAR)+</div><div class="line">                <span class="string">"\r\n week in month: "</span>+c.get(Calendar.WEEK_OF_MONTH));</div><div class="line">        </div><div class="line">        <span class="comment">//日期加减，比较等操作</span></div><div class="line">        c.add(Calendar.DATE,<span class="number">2</span>);</div><div class="line">        c.add(Calendar.MINUTE,<span class="number">1</span>);</div><div class="line">        System.out.println(sdf2.format(c.getTime())+</div><div class="line">                <span class="string">"\r\n weekday:"</span>+c.get(Calendar.DAY_OF_WEEK)+</div><div class="line">                <span class="string">"\r\n days in year: "</span>+c.get(Calendar.DAY_OF_YEAR)+</div><div class="line">                <span class="string">"\r\n week in year: "</span>+c.get(Calendar.WEEK_OF_YEAR)+</div><div class="line">                <span class="string">"\r\n week in month: "</span>+c.get(Calendar.WEEK_OF_MONTH));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong>：</p>
<pre><code>2017-01-01 Sun 22:23:11
 weekday:1
 days in year: 1
 week in year: 1
 week in month: 1
2017-01-03 Tue 22:24:11
 weekday:3
 days in year: 3
 week in year: 1
 week in month: 1
</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Java API 文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java中时间日期的操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>机器学习缺失值处理方法汇总</title>
    <link href="http://yoursite.com/2017/11/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2017/11/26/机器学习缺失值处理方法汇总/</id>
    <published>2017-11-26T13:49:48.375Z</published>
    <updated>2017-11-26T13:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>缺失值处理方法综述</p>
</blockquote>
<a id="more"></a>
<h1 id="缺失值处理方法综述"><a href="#缺失值处理方法综述" class="headerlink" title="缺失值处理方法综述"></a>缺失值处理方法综述</h1><p>缺失值是指粗糙数据中由于缺少信息而造成的数据的聚类、分组、删失或截断。它指的是现有数据集中某个或某些属性的值是不完全的。缺失值的产生的原因多种多样，主要分为机械原因和人为原因。<br>机械原因是由于机械原因导致的数据收集或保存的失败造成的数据缺失，比如数据存储的失败，存储器损坏，机械故障导致某段时间数据未能收集（对于定时数据采集而言）。<br>人为原因是由于人的主观失误、历史局限或有意隐瞒造成的数据缺失，比如，在市场调查中被访人拒绝透露相关问题的答案，或者回答的问题是无效的，数据录入人员失误漏录了数据。<br>以下来讨论缺失值的一般处理方法：</p>
<h2 id="1-删除"><a href="#1-删除" class="headerlink" title="1. 删除"></a>1. 删除</h2><p>主要有简单删除法和权重法。简单删除法是对缺失值进行处理的最原始方法。</p>
<h3 id="1-简单删除法"><a href="#1-简单删除法" class="headerlink" title="(1) 简单删除法"></a>(1) 简单删除法</h3><p>此方法将存在缺失值的数据条目（对象，元组，记录）进行删除。这种方法简单易行，在对象有多个属性缺失值、被删除的含缺失值的对象与信息表中的数据量相比非常小的情况下是非常有效的。然而，这种方法却有很大的局限性。它是以减少历史数据来换取信息的完备，会造成资源的大量浪费，丢弃了大量隐藏在这些对象中的信息。在信息表中本来包含的对象很少的情况下，删除少量对象就足以严重影响到信息表信息的客观性和结果的正确性；当每个属性空值的百分比变化很大时，它的性能非常差。</p>
<h3 id="2-权重法"><a href="#2-权重法" class="headerlink" title="(2) 权重法"></a>(2) 权重法</h3><p>当缺失值的类型为非完全随机缺失的时候，可以通过对完整的数据加权来减小偏差。把数据不完全的个案标记后，将完整的数据个案赋予不同的权重，个案的权重可以通过<em>logistic</em>或<em>probit回归</em>求得。如果解释变量中存在对权重估计起决定行因素的变量，那么这种方法可以有效减小偏差。如果解释变量和权重并不相关，它并不能减小偏差。对于存在多个属性缺失的情况，就需要对不同属性的缺失组合赋不同的权重，这将大大增加计算的难度，降低预测的准确性，这时权重法并不理想。</p>
<h2 id="2-填补"><a href="#2-填补" class="headerlink" title="2. 填补"></a>2. 填补</h2><p>这类方法是用一定的值去填充空值，从而使信息表完备化。通常基于统计学原理，根据决策表中其余对象取值的分布情况来对一个空值进行填充，譬如用其余属性的平均值来进行补充等。数据挖掘中常用的有以下几种补齐方法：</p>
<h3 id="1-人工填写（filling-manually）"><a href="#1-人工填写（filling-manually）" class="headerlink" title="(1) 人工填写（filling manually）"></a>(1) 人工填写（filling manually）</h3><p>由于最了解数据的还是用户自己，因此这个方法产生数据偏离最小，可能是填充效果最好的一种。然而一般来说，该方法很费时，当数据规模很大、空值很多的时候，该方法是不可行的。</p>
<h3 id="2-特殊值填充（Treating-Missing-Attribute-values-as-Special-values）"><a href="#2-特殊值填充（Treating-Missing-Attribute-values-as-Special-values）" class="headerlink" title="(2) 特殊值填充（Treating Missing Attribute values as Special values）"></a>(2) 特殊值填充（Treating Missing Attribute values as Special values）</h3><p>将空值作为一种特殊的属性值来处理，它不同于其他的任何属性值。如所有的空值都用“unknown”填充。这样将形成另一个有趣的概念，可能导致严重的数据偏离，一般不推荐使用。</p>
<h3 id="3-均值填充（Mean-Mode-Completer）"><a href="#3-均值填充（Mean-Mode-Completer）" class="headerlink" title="(3) 均值填充（Mean/Mode Completer）"></a>(3) 均值填充（Mean/Mode Completer）</h3><p>将信息表中的属性分为数值属性和非数值属性来分别进行处理。如果空值是数值型的，就根据该属性在其他所有对象的取值的平均值来填充该缺失的属性值；如果空值是非数值型的，就根据统计学中的众数原理，用该属性在其他所有对象的取值次数最多的值(即出现频率最高的值)来补齐该缺失的属性值。另外有一种与其相似的方法叫<em>条件平均值填充法（Conditional Mean Completer）</em>。在该方法中，缺失属性值的补齐同样是靠该属性在其他对象中的取值求平均得到，但不同的是用于求平均的值并不是从信息表所有对象中取，而是从与该对象具有相同决策属性值的对象中取得。这两种数据的补齐方法，其基本的出发点都是一样的，以最大概率可能的取值来补充缺失的属性值，只是在具体方法上有一点不同。与其他方法相比，它是用现存数据的多数信息来推测缺失值。</p>
<h3 id="4-热卡填充（Hot-deck-imputation，或就近补齐）"><a href="#4-热卡填充（Hot-deck-imputation，或就近补齐）" class="headerlink" title="(4) 热卡填充（Hot deck imputation，或就近补齐）"></a>(4) 热卡填充（Hot deck imputation，或就近补齐）</h3><p>对于一个包含空值的对象，热卡填充法在完整数据中找到一个与它最相似的对象，然后用这个相似对象的值来进行填充。不同的问题可能会选用不同的标准来对相似进行判定。该方法概念上很简单，且利用了数据间的关系来进行空值估计。这个方法的缺点在于难以定义相似标准，主观因素较多。</p>
<h3 id="5-聚类填充-clustering-imputation"><a href="#5-聚类填充-clustering-imputation" class="headerlink" title="(5) 聚类填充(clustering imputation)"></a>(5) 聚类填充(clustering imputation)</h3><p>最为典型的代表是<em>K最近距离邻法（K-means clustering）</em>，先根据欧式距离或相关分析来确定距离具有缺失数据样本最近的K个样本，将这K个值加权平均来估计该样本的缺失数据。同均值插补的方法都属于单值插补，不同的是，它用层次聚类模型预测缺失变量的类型，再以该类型的均值插补。假设X=(X1,X2…Xp)为信息完全的变量，Y为存在缺失值的变量，那么首先对X或其子集行聚类，然后按缺失个案所属类来插补不同类的均值。如果在以后统计分析中还需以引入的解释变量和Y做分析，那么这种插补方法将在模型中引入自相关，给分析造成障碍。</p>
<h3 id="6-使用所有可能的值填充（Assigning-All-Possible-values-of-the-Attribute）"><a href="#6-使用所有可能的值填充（Assigning-All-Possible-values-of-the-Attribute）" class="headerlink" title="(6) 使用所有可能的值填充（Assigning All Possible values of the Attribute）"></a>(6) 使用所有可能的值填充（Assigning All Possible values of the Attribute）</h3><p>这种方法是用空缺属性值的所有可能的属性取值来填充，能够得到较好的补齐效果。但是，当数据量很大或者遗漏的属性值较多时，其计算的代价很大，可能的测试方案很多。另有一种方法，填补遗漏属性值的原则是一样的，不同的只是从决策相同的对象中尝试所有的属性值的可能情况，而不是根据信息表中所有对象进行尝试，这样能够在一定程度上减小原方法的代价。</p>
<h3 id="7-组合完整化方法（Combinatorial-Completer）"><a href="#7-组合完整化方法（Combinatorial-Completer）" class="headerlink" title="(7) 组合完整化方法（Combinatorial Completer）"></a>(7) 组合完整化方法（Combinatorial Completer）</h3><p>这种方法是用空缺属性值的所有可能的属性取值来试，并从最终属性的约简结果中选择最好的一个作为填补的属性值。这是以约简为目的的数据补齐方法，能够得到好的约简结果；但是，当数据量很大或者遗漏的属性值较多时，其计算的代价很大。另一种称为<em>条件组合完整化方法（Conditional Combinatorial Complete）</em>，填补遗漏属性值的原则是一样的，不同的只是从决策相同的对象中尝试所有的属性值的可能情况，而不是根据信息表中所有对象进行尝试。条件组合完整化方法能够在一定程度上减小组合完整化方法的代价。在信息表包含不完整数据较多的情况下，可能的测试方案将巨增。</p>
<h3 id="8-回归（Regression）"><a href="#8-回归（Regression）" class="headerlink" title="(8) 回归（Regression）"></a>(8) 回归（Regression）</h3><p>基于完整的数据集，建立回归方程（模型）。对于包含空值的对象，将已知属性值代入方程来估计未知属性值，以此估计值来进行填充。当变量不是线性相关或预测变量高度相关时会导致有偏差的估计。</p>
<h3 id="9-极大似然估计（Max-Likelihood-，ML）"><a href="#9-极大似然估计（Max-Likelihood-，ML）" class="headerlink" title="(9) 极大似然估计（Max Likelihood ，ML）"></a>(9) 极大似然估计（Max Likelihood ，ML）</h3><p>在缺失类型为随机缺失的条件下，假设模型对于完整的样本是正确的，那么通过观测数据的边际分布可以对未知参数进行<em>极大似然估计（Little and Rubin）</em>。这种方法也被称为忽略缺失值的极大似然估计，对于极大似然的参数估计实际中常采用的计算方法是<em>期望值最大化(Expectation Maximization，EM）</em>。该方法比删除个案和单值插补更有吸引力，它一个重要前提：适用于大样本。有效样本的数量足够以保证ML估计值是渐近无偏的并服从正态分布。但是这种方法可能会陷入局部极值，收敛速度也不是很快，并且计算很复杂。</p>
<h3 id="10-多重插补（Multiple-Imputation，MI）"><a href="#10-多重插补（Multiple-Imputation，MI）" class="headerlink" title="(10) 多重插补（Multiple Imputation，MI）"></a>(10) 多重插补（Multiple Imputation，MI）</h3><p>多值插补的思想来源于贝叶斯估计，认为待插补的值是随机的，它的值来自于已观测到的值。具体实践上通常是估计出待插补的值，然后再加上不同的噪声，形成多组可选插补值。根据某种选择依据，选取最合适的插补值。多重插补方法分为三个步骤：①为每个空值产生一套可能的插补值，这些值反映了无响应模型的不确定性；每个值都可以被用来插补数据集中的缺失值，产生若干个完整数据集合。②每个插补数据集合都用针对完整数据集的统计方法进行统计分析。③对来自各个插补数据集的结果，根据评分函数进行选择，产生最终的插补值。<br>多重插补和贝叶斯估计的思想是一致的，但是多重插补弥补了贝叶斯估计的几个不足。第一，贝叶斯估计以极大似然的方法估计，极大似然的方法要求模型的形式必须准确，如果参数形式不正确，将得到错误得结论，即先验分布将影响后验分布的准确性。而多重插补所依据的是大样本渐近完整的数据的理论，在数据挖掘中的数据量都很大，先验分布将极小的影响结果，所以先验分布的对结果的影响不大。第二，贝叶斯估计仅要求知道未知参数的先验分布，没有利用与参数的关系。而多重插补对参数的联合分布作出了估计，利用了参数间的相互关系。<br>同时，多重插补保持了单一插补的两个基本优点，即应用完全数据分析方法和融合数据收集者知识的能力。相对于单一插补，多重插补有三个极其重要的优点：第一，为表现数据分布，随机抽取进行插补，增加了估计的有效性。第二，当多重插补是在某个模型下的随机抽样时，按一种直接方式简单融合完全数据推断得出有效推断，即它反映了在该模型下由缺失值导致的附加变异。第三，在多个模型下通过随机抽取进行插补，简单地应用完全数据方法，可以对无回答的不同模型下推断的敏感性进行直接研究。<br>多重插补也有以下缺点：①生成多重插补比单一插补需要更多工作；②贮存多重插补数据集需要更多存储空间；③分析多重插补数据集比单一插补需要花费更多精力。</p>
<h2 id="3-不处理"><a href="#3-不处理" class="headerlink" title="3. 不处理"></a>3. 不处理</h2><p>直接在包含空值的数据上进行数据挖掘。这类方法包括贝叶斯网络和人工神经网络等。<br>贝叶斯网络是用来表示变量间连接概率的图形模式，它提供了一种自然的表示因果信息的方法，用来发现数据间的潜在关系。在这个网络中，用节点表示变量，有向边表示变量间的依赖关系。贝叶斯网络仅适合于对领域知识具有一定了解的情况，至少对变量间的依赖关系较清楚的情况。否则直接从数据中学习贝叶斯网的结构不但复杂性较高（随着变量的增加，指数级增加），网络维护代价昂贵，而且它的估计参数较多，为系统带来了高方差，影响了它的预测精度。当在任何一个对象中的缺失值数量很大时，存在指数爆炸的危险。<br>人工神经网络可以有效的对付空值，但人工神经网络在这方面的研究还有待进一步深入展开。人工神经网络方法在数据挖掘应用中的局限性</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>部分方法的优缺点及适用环境如下：<br> <img src="https://i.imgur.com/0QQ90gm.png" alt=""><br>以上插补方法，对于缺失值的类型为随机缺失的插补有很好的效果。两种均值插补方法是最容易实现的，也是以前人们经常使用的，但是它对样本存在极大的干扰，尤其是当插补后的值作为解释变量进行回归时，参数的估计值与真实值的偏差很大。相比较而言，极大似然估计和多重插补是两种比较好的插补方法，与多重插补对比，极大似然缺少不确定成分，所以越来越多的人倾向于使用多值插补方法。</p>
<h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5. 参考文献"></a>5. 参考文献</h2><p><a href="https://www.researchgate.net/profile/Chi_Seng_Pun/publication/311399915_Research_on_Multivariate_Statistical_Analysis_with_Missing_Data_in_Chinese/links/58443f2a08ae61f75dd67d67/Research-on-Multivariate-Statistical-Analysis-with-Missing-Data-in-Chinese.pdf" target="_blank" rel="external">https://www.researchgate.net/profile/Chi_Seng_Pun/publication/311399915_Research_on_Multivariate_Statistical_Analysis_with_Missing_Data_in_Chinese/links/58443f2a08ae61f75dd67d67/Research-on-Multivariate-Statistical-Analysis-with-Missing-Data-in-Chinese.pdf</a><br><a href="http://www.wenhuaxuan.com/shujuchuli/2013-09-27/7019.html" target="_blank" rel="external">http://www.wenhuaxuan.com/shujuchuli/2013-09-27/7019.html</a><br><a href="https://www.amazon.com/Flexible-Imputation-Missing-Interdisciplinary-Statistics/dp/1439868247" target="_blank" rel="external">https://www.amazon.com/Flexible-Imputation-Missing-Interdisciplinary-Statistics/dp/1439868247</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;缺失值处理方法综述&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据挖掘" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架的学习（续）</title>
    <link href="http://yoursite.com/2017/05/20/%E9%9B%86%E5%90%882/"/>
    <id>http://yoursite.com/2017/05/20/集合2/</id>
    <published>2017-05-20T12:01:02.972Z</published>
    <updated>2016-11-11T09:34:52.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>Map：一次添加一对元素。Collection 一次添加一个元素。</p>
<blockquote>
<p>Map也称为双列集合，Collection集合称为单列集合。<br>其实map集合中存储的就是键值对。<br>map集合中必须保证键的唯一性。 </p>
</blockquote>
<a id="more"></a>
<h3 id="Map常用方法："><a href="#Map常用方法：" class="headerlink" title="Map常用方法："></a>Map常用方法：</h3><ol>
<li><p>添加。</p>
<blockquote>
<p>value put(key,value):返回前一个和key关联的值，如果没有返回null.</p>
</blockquote>
</li>
<li><p>删除。</p>
<blockquote>
<p>void  clear():清空map集合。<br>value remove(key):根据指定的key翻出这个键值对。 </p>
</blockquote>
</li>
<li><p>判断。</p>
<blockquote>
<p>boolean containsKey(key):<br>boolean containsValue(value):<br>boolean isEmpty();</p>
</blockquote>
</li>
<li><p>获取。 </p>
<blockquote>
<p>value get(key):通过键获取值，如果没有该键返回null。<br>当然可以通过返回null，来判断是否包含指定键。<br>int size(): 获取键值对的个数。 </p>
</blockquote>
</li>
</ol>
<h3 id="Map常用的子类："><a href="#Map常用的子类：" class="headerlink" title="Map常用的子类："></a>Map常用的子类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|--Hashtable :内部结构是哈希表，是同步的。不允许<span class="keyword">null</span>作为键，<span class="keyword">null</span>作为值。</div><div class="line">	|--Properties：用来存储键值对型的配置文件的信息，可以和IO技术相结合。 		</div><div class="line">|--HashMap : 内部结构是哈希表，不是同步的。允许<span class="keyword">null</span>作为键，<span class="keyword">null</span>作为值。</div><div class="line">|--TreeMap : 内部结构是二叉树，不是同步的。可以对Map集合中的键进行排序。</div></pre></td></tr></table></figure>
<h3 id="Map集合的两种取出方式："><a href="#Map集合的两种取出方式：" class="headerlink" title="Map集合的两种取出方式："></a>Map集合的两种取出方式：</h3><ol>
<li>Set<k> keySet:将Map中所有的键存入Set集合。因为Set具备迭代器。所有可以迭代的方式取出所有的键，再根据get方法，获取每一个键对应的值。<blockquote>
<p>Map集合取出的原理：将map集合转成Set集合，再通过迭代器取出。</p>
</blockquote>
</k></li>
<li>Set<map.entry<k,v>&gt; entrySet:将map集合中的映射关系存入到了set集合中。而这个关系的数据类型就是Map.Entry<h3 id="Map的综合应用"><a href="#Map的综合应用" class="headerlink" title="Map的综合应用"></a>Map的综合应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">	Student(String name,<span class="keyword">int</span> age)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.name=name;</div><div class="line">		<span class="keyword">this</span>.age=age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student s)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> num=<span class="keyword">new</span>	Integer(<span class="keyword">this</span>.age).compareTo(<span class="keyword">new</span> Integer(s.age));</div><div class="line">		<span class="keyword">if</span> (num==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(s.name);</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> name+<span class="string">"---"</span>+age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> name.hashCode()+<span class="number">34</span>*age;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> Student))</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="string">"class erro"</span>);</div><div class="line">		Student s=(Student)obj;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name.equals(s.name)&amp;&amp;<span class="keyword">this</span>.age==s.age;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StuNameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1,Student s2)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> num=s1.getName().compareTo(s2.getName());</div><div class="line">		<span class="keyword">return</span> num==<span class="number">0</span>?<span class="keyword">new</span> Integer(s1.getAge()).compareTo(<span class="keyword">new</span> Integer(s2.getAge())):num;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapTest</span></span></div><div class="line">&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		//HashMap第一种取出方式keySet</div><div class="line">		HashMap&lt;Student,String&gt;hm=new HashMap&lt;Student,String&gt;();</div><div class="line">		hm.put(new Student("lisi1",21),"beijin");</div><div class="line">		hm.put(new Student("lisi2",22),"shanghai");</div><div class="line">		hm.put(new Student("lisi3",23),"nanjing");</div><div class="line">		hm.put(new Student("lisi4",24),"dalian");</div><div class="line">		Set&lt;Student&gt;keySet=hm.keySet();</div><div class="line">		Iterator&lt;Student&gt;it=keySet.iterator();</div><div class="line">		while(it.hasNext())&#123;</div><div class="line">			Student stu=it.next();</div><div class="line">			String addr=hm.get(stu);</div><div class="line">			System.out.println(stu+"---"+addr);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		//HashMap第二种取出方式Map.Entry</div><div class="line">		Iterator&lt;Map.Entry&lt;Student,String&gt;&gt;iter=hm.entrySet().iterator();</div><div class="line">		while(iter.hasNext())&#123;</div><div class="line">			Map.Entry&lt;Student,String&gt; me=iter.next();</div><div class="line">			String addr=me.getValue();</div><div class="line">			Student stu=me.getKey();</div><div class="line">			System.out.println(stu+"....."+addr);</div><div class="line">		&#125;*/</div><div class="line">		<span class="comment">//TreeMap取出方式</span></div><div class="line">		TreeMap&lt;Student,String&gt;tm=<span class="keyword">new</span> TreeMap&lt;Student,String&gt;(<span class="keyword">new</span> StuNameComparator());</div><div class="line">		tm.put(<span class="keyword">new</span> Student(<span class="string">"slisi1"</span>,<span class="number">21</span>),<span class="string">"beijin"</span>);</div><div class="line">		tm.put(<span class="keyword">new</span> Student(<span class="string">"wlisi2"</span>,<span class="number">22</span>),<span class="string">"shanghai"</span>);</div><div class="line">		tm.put(<span class="keyword">new</span> Student(<span class="string">"flisi3"</span>,<span class="number">23</span>),<span class="string">"nanjing"</span>);</div><div class="line">		tm.put(<span class="keyword">new</span> Student(<span class="string">"alisi4"</span>,<span class="number">24</span>),<span class="string">"dalian"</span>);</div><div class="line">		<span class="comment">//高级for循环迭代方式</span></div><div class="line">		<span class="comment">/*for(Map.Entry&lt;Student,String&gt; me:tm.entrySet())</span></div><div class="line">			System.out.println(me.getKey()+"-----"+me.getValue);*/</div><div class="line">		Iterator&lt;Map.Entry&lt;Student,String&gt;&gt;it=tm.entrySet().iterator();</div><div class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">			Map.Entry&lt;Student,String&gt; me=it.next();</div><div class="line">			Student s=me.getKey();</div><div class="line">			String addr=me.getValue();</div><div class="line">			System.out.println(s+<span class="string">"-----"</span>+addr);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</map.entry<k,v></li>
</ol>
<p>===========================================================</p>
<h2 id="集合的一些技巧："><a href="#集合的一些技巧：" class="headerlink" title="集合的一些技巧："></a>集合的一些技巧：</h2><p>需要唯一吗？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">需要：Set</div><div class="line">	需要制定顺序： </div><div class="line">			需要： TreeSet</div><div class="line">			不需要：HashSet</div><div class="line">			但是想要一个和存储一致的顺序(有序):LinkedHashSet</div><div class="line">不需要：List</div><div class="line">	需要频繁增删吗？</div><div class="line">		需要：LinkedList</div><div class="line">		不需要：ArrayList</div><div class="line">		</div><div class="line">如何记录每一个容器的结构和所属体系呢？</div><div class="line"></div><div class="line">看名字！</div><div class="line"></div><div class="line"></div><div class="line">List</div><div class="line">	|--ArrayList</div><div class="line">	|--LinkedList</div><div class="line"></div><div class="line">Set</div><div class="line">	|--HashSet</div><div class="line">	|--TreeSet</div></pre></td></tr></table></figure></p>
<p>后缀名就是该集合所属的体系。</p>
<p>前缀名就是该集合的数据结构。</p>
<p>看到array：就要想到数组，就要想到查询快，有角标.<br>看到link：就要想到链表，就要想到增删快，就要想要 add get remove+frist last的方法<br>看到hash:就要想到哈希表，就要想到唯一性，就要想到元素需要覆盖hashcode方法和equals方法。<br>看到tree：就要想到二叉树，就要想要排序，就要想到两个接口Comparable，Comparator 。</p>
<p>而且通常这些常用的集合容器都是不同步的。 </p>
<p>============================================</p>
<h2 id="Map集合和Collection集合的区别？"><a href="#Map集合和Collection集合的区别？" class="headerlink" title="Map集合和Collection集合的区别？"></a>Map集合和Collection集合的区别？</h2><ol>
<li>Map中一次存储是键值对。<br>Collection中一次存储是单个元素。</li>
<li>Map的存储使用的put方法。<br>Collection存储使用的是add方法。 </li>
<li>Map的取出，是讲Map转成Set，在使用迭代器取出。<br>Collection取出，使用就是迭代器。</li>
<li>如果对象很多，必须使用容器存储。<br>如果元素存在着映射关系，可以优先考虑使用Map存储或者用数组，<br>如果没有映射关系，可以使用Collection存储。</li>
</ol>
<h2 id="Collections和Arrays"><a href="#Collections和Arrays" class="headerlink" title="Collections和Arrays"></a>Collections和Arrays</h2><p>Collections和Arrays：是集合框架的工具类。里面的方法都是静态的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List&lt;?&gt; list)</span> </span></div><div class="line">          使用默认随机源对指定列表进行置换。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; T </div><div class="line"> <span class="title">max</span><span class="params">(Collection&lt;? extends T&gt; coll, Comparator&lt;? <span class="keyword">super</span> T&gt; comp)</span> </div><div class="line">          根据指定比较器产生的顺序，返回给定 collection 的最大元素。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="keyword">int</span> </div><div class="line"> <span class="title">binarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; list, T key)</span> </div><div class="line">          使用二分搜索法搜索指定列表，以获得指定对象。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="keyword">int</span> </div><div class="line"> <span class="title">binarySearch</span><span class="params">(List&lt;? extends T&gt; list, T key, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </div><div class="line">          使用二分搜索法搜索指定列表，以获得指定对象。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; </div><div class="line"> <span class="title">reverseOrder</span><span class="params">()</span> </div><div class="line">          返回一个比较器，它强行逆转实现了 Comparable 接口的对象 collection 的自然顺序。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; </div><div class="line"> <span class="title">reverseOrder</span><span class="params">(Comparator&lt;T&gt; cmp)</span> </div><div class="line">          返回一个比较器，它强行逆转指定比较器的顺序。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="keyword">boolean</span> </div><div class="line"> <span class="title">replaceAll</span><span class="params">(List&lt;T&gt; list, T oldVal, T newVal)</span> </div><div class="line">          使用另一个值替换列表中出现的所有某一指定值。 </div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List&lt;?&gt; list)</span> </div><div class="line">          反转指定列表中元素的顺序。 </div><div class="line"><span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; </div><div class="line"><span class="keyword">void</span> </div><div class="line"> <span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span> </div><div class="line">          根据元素的自然顺序 对指定列表按升序进行排序。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> </div><div class="line"> <span class="title">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </div><div class="line">          根据指定比较器产生的顺序对指定列表进行排序。 </div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(List&lt;?&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </div><div class="line">          在指定列表的指定位置处交换元素。 </div><div class="line"><span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; </div><div class="line"> <span class="title">synchronizedList</span><span class="params">(List&lt;T&gt; list)</span> </div><div class="line">          返回指定列表支持的同步（线程安全的）列表。</div></pre></td></tr></table></figure>
<p>Collections方法使用部分代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo_4</span><span class="params">()</span> </span>&#123;</div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		</div><div class="line">		list.add(<span class="string">"abcde"</span>);</div><div class="line">		list.add(<span class="string">"cba"</span>);</div><div class="line">		list.add(<span class="string">"zhangsan"</span>);</div><div class="line">		list.add(<span class="string">"zhaoliu"</span>);</div><div class="line">		list.add(<span class="string">"xiaoqiang"</span>);</div><div class="line">		</div><div class="line">		System.out.println(list);</div><div class="line"><span class="comment">//		Collections.replaceAll(list, "cba", "nba"); // set(indexOf("cba"),"nba");</span></div><div class="line">		Collections.shuffle(list);<span class="comment">//随机顺序</span></div><div class="line"><span class="comment">//		Collections.fill(list, "cc");//填充</span></div><div class="line"><span class="comment">//		String max = Collections.max(list,new ComparatorByLength());//最大值</span></div><div class="line"><span class="comment">//		Collections.sort(list,new ComparatorByLength());//实现Comparator接口排序</span></div><div class="line">		System.out.println(list);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo_3</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;(new Comparator&lt;String&gt;()&#123;</div><div class="line"></div><div class="line">			@Override</div><div class="line">			public int compare(String o1, String o2) &#123;</div><div class="line">				</div><div class="line">				int temp = o2.compareTo(o1);</div><div class="line">				return temp;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125;);</div><div class="line">		*/</div><div class="line">		TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;String&gt;(Collections.reverseOrder(<span class="keyword">new</span> ComparatorByLength()));	</div><div class="line">		</div><div class="line">		ts.add(<span class="string">"abc"</span>);</div><div class="line">		ts.add(<span class="string">"hahaha"</span>);</div><div class="line">		ts.add(<span class="string">"zzz"</span>);</div><div class="line">		ts.add(<span class="string">"aa"</span>);</div><div class="line">		ts.add(<span class="string">"cba"</span>);</div><div class="line">		</div><div class="line">		System.out.println(ts);</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h2 id="foreach语句："><a href="#foreach语句：" class="headerlink" title="foreach语句："></a>foreach语句：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">格式：</div><div class="line"><span class="keyword">for</span>(类型  变量   ：Collection集合|数组)</div><div class="line">&#123;</div><div class="line">		作用语句；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可以使用高级for遍历map集合吗？"><a href="#可以使用高级for遍历map集合吗？" class="headerlink" title="可以使用高级for遍历map集合吗？"></a>可以使用高级for遍历map集合吗？</h3><p>不能直接用，但是可以将map转成单列的set，就可以用了。</p>
<blockquote>
<p>Map<integer,string> map = new HashMap<integer,string>();</integer,string></integer,string></p>
</blockquote>
<h3 id="传统for和高级for的区别？"><a href="#传统for和高级for的区别？" class="headerlink" title="传统for和高级for的区别？"></a>传统for和高级for的区别？</h3><p>传统for可以完成对语句执行很多次，因为可以定义控制循环的增量和条件。<br>高级for是一种简化形式。它必须有被遍历的目标。<br>该目标要是数组，要么是Collection单列集合。<br>对数数组的遍历如果仅仅是获取数组中的元素，可以使用高级for。<br>如果要对数组的角标进行操作建议使用传统for。 </p>
<h2 id="Array和集合的互相转换"><a href="#Array和集合的互相转换" class="headerlink" title="Array和集合的互相转换"></a>Array和集合的互相转换</h2><h3 id="集合转成数组"><a href="#集合转成数组" class="headerlink" title="集合转成数组"></a>集合转成数组</h3><p>使用的就是Collection接口中的toArray方法。<br>toArray方法需要传入一个指定类型的数组。</p>
<h4 id="为什么要转成数组（好处）："><a href="#为什么要转成数组（好处）：" class="headerlink" title="为什么要转成数组（好处）："></a>为什么要转成数组（好处）：</h4><blockquote>
<p>可以对集合中的元素操作的方法进行限定。不允许对其进行增删。</p>
</blockquote>
<h4 id="长度该如何定义呢？"><a href="#长度该如何定义呢？" class="headerlink" title="长度该如何定义呢？"></a>长度该如何定义呢？</h4><p>如果长度小于集合的size，那么该方法会创建一个同类型并和集合相同size的数组。<br>如果长度大于集合的size，那么该方法就会使用指定的数组，存储集合中的元素，其他位置默认为null。<br>所以建议，最后长度就指定为，集合的size。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">list.add(<span class="string">"abc1"</span>);</div><div class="line">list.add(<span class="string">"abc2"</span>);</div><div class="line">list.add(<span class="string">"abc3"</span>);</div><div class="line">String[] arr = list.toArray(<span class="keyword">new</span> String[list.size()]);</div><div class="line">System.out.println(Arrays.toString(arr));</div></pre></td></tr></table></figure></p>
<h3 id="数组转成集合"><a href="#数组转成集合" class="headerlink" title="数组转成集合"></a>数组转成集合</h3><p>使用Arrays：List asList(数组)将数组转成集合。</p>
<blockquote>
<p>如果数组中的元素是对象，那么转成集合时，直接将数组中的元素作为集合中的元素进行集合存储。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] arr = &#123;<span class="string">"abc"</span>,<span class="string">"haha"</span>,<span class="string">"xixi"</span>&#125;;</div><div class="line">List&lt;String&gt; list = Arrays.asList(arr);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>如果数组中的元素是基本类型数值，那么会将该数组作为集合中的元素进行存储。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">31</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">61</span>&#125;;</div><div class="line">List&lt;<span class="keyword">int</span>[]&gt; list = Arrays.asList(arr);</div></pre></td></tr></table></figure></p>
<p>好处：其实可以使用集合的方法操作数组中的元素。<br>注意：数组的长度是固定的，所以对于集合的<strong>增删</strong>方法是不可以使用的，否则会发生UnsupportedOperationException<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">		String[] arr = &#123;<span class="string">"abc"</span>,<span class="string">"haha"</span>,<span class="string">"xixi"</span>&#125;;</div><div class="line">		List&lt;String&gt; list = Arrays.asList(arr);</div><div class="line">		<span class="keyword">boolean</span> b1 = list.contains(<span class="string">"xixi"</span>);</div><div class="line"><span class="comment">//		list.add("hiahia");//UnsupportedOperationException</span></div></pre></td></tr></table></figure></p>
<h2 id="函数的可变参数"><a href="#函数的可变参数" class="headerlink" title="函数的可变参数"></a>函数的可变参数</h2><p>其实就是一个<strong>数组</strong>，但是接收的是数组的元素。<br>自动将这些元素封装成数组。简化了调用者的书写。<br>注意：可变参数类型，必须定义在参数列表的<strong>结尾</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	show(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div><div class="line">	show(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</div><div class="line">	print(<span class="string">"saldklaskd"</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">54</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>... arr)</span></span></div><div class="line">&#123;</div><div class="line">	System.out.println(arr.length());</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str,integer... arr)</span></span></div><div class="line">&#123;</div><div class="line">	System.out.println(arr.length());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><p>import static java.util.<strong>Collections</strong>.<em>;//静态导入，其实到入的是类中的静态成员。<br>import static java.util.<strong>Arrays</strong>.</em><br>import static java.lang.<strong>System</strong>.*;<br>导入之后便可直接使用类中的静态函数，简化了书写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</div><div class="line">sort(arr);<span class="comment">//省略了Arrays.</span></div><div class="line">out.println(Arrays.toString(arr));<span class="comment">//省略了System.不能省略toString前面的Arrays，</span></div><div class="line"><span class="comment">//因为Object类中也有toString方法必须加上类名区分。</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Map集合&quot;&gt;&lt;a href=&quot;#Map集合&quot; class=&quot;headerlink&quot; title=&quot;Map集合&quot;&gt;&lt;/a&gt;Map集合&lt;/h2&gt;&lt;p&gt;Map：一次添加一对元素。Collection 一次添加一个元素。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Map也称为双列集合，Collection集合称为单列集合。&lt;br&gt;其实map集合中存储的就是键值对。&lt;br&gt;map集合中必须保证键的唯一性。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架的学习</title>
    <link href="http://yoursite.com/2017/05/20/%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2017/05/20/集合/</id>
    <published>2017-05-20T12:01:02.965Z</published>
    <updated>2016-11-08T14:29:36.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><ul>
<li>集合框架：为什么要出现这么多容器？</li>
</ul>
<blockquote>
<p>因为每一个容器对数据的存储方式都有不同。这个存储方式称之为：数据结构。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>集合类的由来：</li>
</ul>
<blockquote>
<p>对象用于封装特有数据，对象多了需要存储，如果对象的个数不确定。就使用集合容器进行存储。</p>
</blockquote>
<ul>
<li>集合特点：</li>
</ul>
<blockquote>
<ol>
<li>用于存储对象的容器。</li>
<li>集合的长度是可变的。</li>
<li>集合中不可以存储基本数据类型值。 </li>
</ol>
</blockquote>
<p>集合容器因为内部的数据结构不同，有多种具体容器。<br>不断的向上抽取，就形成了集合框架。<br><img src="http://i.imgur.com/WhI1dni.png" alt=""></p>
<h2 id="接口-Collection"><a href="#接口-Collection" class="headerlink" title="接口 Collection"></a>接口 Collection<e></e></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">//取交集</span></span></div><div class="line"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span>  <span class="comment">//删除与c里面元素相同的元素</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">//取并集</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">//如果此 collection 包含指定 collection 中的所有元素，则返回 true。</span></div></pre></td></tr></table></figure>
<h3 id="Iterator-iterator"><a href="#Iterator-iterator" class="headerlink" title="Iterator iterator()"></a>Iterator<e> iterator()</e></h3><p>返回在此 collection 的元素上进行迭代的迭代器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> <span class="comment">//如果仍有元素可以迭代，则返回 true。 </span></span></div><div class="line">E <span class="title">next</span><span class="params">()</span><span class="comment">//返回迭代的下一个元素。 </span></div><div class="line"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span><span class="comment">// 从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。 </span></div><div class="line"><span class="title">for</span><span class="params">(Iterator it=对象.iterator()</span>;it.hasNext();)</div><div class="line">	it.next();<span class="comment">//do something</span></div></pre></td></tr></table></figure></p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>元素是有序的可以重复，因为有索引</p>
<ul>
<li>List特有方法（凡是可以操作角标的方法都是List特有方法）</li>
<li>ListIterator是Iterator的子接口。在迭代时，不可以通过集合对象的方法操作集合中的元素，因为会发生并发异常。所以在迭代市只能用迭代器方法操作元素，但是Iterator方法是有限的，如果想要添加修改等操作需要使用子接口，ListIterator</li>
</ul>
<blockquote>
<p>注意不能用迭代器的同时使用集合的方法进行操作（并发修改），否则会抛出异常ConcurrentModificationException</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ListIterator方法：</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span></div><div class="line">          将指定的元素插入列表（可选操作）。 </div><div class="line"> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </div><div class="line">          以正向遍历列表时，如果列表迭代器有多个元素，则返回 <span class="keyword">true</span>（换句话说，如果 next 返回一个元素而不是抛出异常，则返回 <span class="keyword">true</span>）。 </div><div class="line"> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </div><div class="line">          如果以逆向遍历列表，列表迭代器有多个元素，则返回 <span class="keyword">true</span>。 </div><div class="line"> E <span class="title">next</span><span class="params">()</span> </div><div class="line">          返回列表中的下一个元素。 </div><div class="line"> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </div><div class="line">          返回对 next 的后续调用所返回元素的索引。 </div><div class="line"> E <span class="title">previous</span><span class="params">()</span> </div><div class="line">          返回列表中的前一个元素。 </div><div class="line"> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </div><div class="line">          返回对 previous 的后续调用所返回元素的索引。 </div><div class="line"> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </div><div class="line">          从列表中移除由 next 或 previous 返回的最后一个元素（可选操作）。 </div><div class="line"> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </div><div class="line">          用指定元素替换 next 或 previous 返回的最后一个元素（可选操作）。</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span><span class="comment">//在列表的指定位置插入指定元素（可选操作）。 </span></span></div><div class="line"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span><span class="comment">//添加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序</span></div><div class="line">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span><span class="comment">//返回此列表元素的列表迭代器（按适当顺序）。 </span></div><div class="line">List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><span class="comment">//返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。</span></div><div class="line">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </div><div class="line">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </div><div class="line">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></div></pre></td></tr></table></figure>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>内部是数组数据结构，是同步的。增删，查询都很慢！<br>1.2版本之前使用（当时没有集合框架）较多后被ArrayList替代<br><em>枚举就是Vector特有的取出方式，枚举和迭代器很像，因为枚举名称方法较长所以被迭代器取代了</em></p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>内部是数组数据结构，是不同步（异步）的。替代了Vector。查询的速度快。<br>1.2版本之后出现替代了Vector，默认构造元素长度是10，超出后按50%延长（Vector是100%）。<br>比较的时候需要注意equals方法的重写。</p>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>内部是链表数据结构，是不同步的。增删元素的速度很快。</p>
<ul>
<li>特有方法</li>
<li>1.6版本以后的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span></div><div class="line">         将指定元素添加到此列表的末尾（最后一个元素）。 </div><div class="line"><span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </div><div class="line">         在此列表的开头插入指定的元素。 </div><div class="line"><span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </div><div class="line">         在此列表末尾插入指定的元素。 </div><div class="line">E <span class="title">peek</span><span class="params">()</span> </div><div class="line">         获取但不移除此列表的头（第一个元素）。 </div><div class="line">E <span class="title">peekFirst</span><span class="params">()</span> </div><div class="line">         获取但不移除此列表的第一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。 </div><div class="line">E <span class="title">peekLast</span><span class="params">()</span> </div><div class="line">         获取但不移除此列表的最后一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。 </div><div class="line">E <span class="title">poll</span><span class="params">()</span> </div><div class="line">         获取并移除此列表的头（第一个元素） </div><div class="line">E <span class="title">pollFirst</span><span class="params">()</span> </div><div class="line">         获取并移除此列表的第一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。 </div><div class="line">E <span class="title">pollLast</span><span class="params">()</span> </div><div class="line">         获取并移除此列表的最后一个元素；如果此列表为空，则返回 <span class="keyword">null</span>。</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>元素是无序的，不可以重复<br>Set集合的功能和Collection功能是一致的</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>数据结构是哈希表，线程是非同步的<br>哈希表储存方式：先判断地址值（hashCode）是否一样，不一样就存入，一样的话继续判断是否同一个对象（equals方法），不是同一对象的话会在同地址下顺延。</p>
<blockquote>
<p>哈希表确定元素是否相同</p>
<ol>
<li>判断的是两个元素的哈希值是否相同。如果相同，在判断两个对象的内容是否相同。</li>
<li>判断哈希值相同，其实判断的是对象的hashCode的方法。判断内容相同，用的是equals方法。<br>注意：如果哈希值不同，是不需要判断equals。<br><img src="http://i.imgur.com/OnOQkYw.png" alt=""></li>
</ol>
</blockquote>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>可以对Set集合中的元素进行排序<br>自定义数据类型时需要重写Compareble里的compareTo函数</p>
<blockquote>
<p> int compareTo(T o) //比较此对象与指定对象的顺序。 </p>
</blockquote>
<p>底层数据结构是二叉树，保证元素唯一性的依据compareTo方法return0.<br>treeSet排序的第一种方式：让让元素自身具备比较性，元素需要实现CompareTo方法。这种顺序叫做自然顺序也叫默认顺序<br>TreeSet排序的第二种方式：让集合自身具备比较功能，定义一个类实现Comparator接口，覆盖compare方法。将该类对象作为参数传递给TreeSet集合的构造函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.TreeSet;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorByLength</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</div><div class="line">			</div><div class="line">			String s1 = (String)o1;</div><div class="line">			String s2 = (String)o2;</div><div class="line">			</div><div class="line">			<span class="keyword">int</span> temp = s1.length()-s2.length();</div><div class="line">			</div><div class="line">			<span class="keyword">return</span> temp==<span class="number">0</span>? s1.compareTo(s2): temp;</div><div class="line">			<span class="comment">//基础类型都有compareTo方法</span></div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		TreeSet ts = <span class="keyword">new</span> TreeSet(<span class="keyword">new</span> ComparatorByLength());</div><div class="line"></div><div class="line">		ts.add(<span class="string">"aaaaa"</span>);</div><div class="line">		ts.add(<span class="string">"zz"</span>);</div><div class="line">		ts.add(<span class="string">"nbaq"</span>);</div><div class="line">		ts.add(<span class="string">"cba"</span>);</div><div class="line">		ts.add(<span class="string">"abc"</span>);</div><div class="line">		</div><div class="line">		Iterator it = ts.iterator();</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">			System.out.println(it.next());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合框架&quot;&gt;&lt;a href=&quot;#集合框架&quot; class=&quot;headerlink&quot; title=&quot;集合框架&quot;&gt;&lt;/a&gt;集合框架&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;集合框架：为什么要出现这么多容器？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因为每一个容器对数据的存储方式都有不同。这个存储方式称之为：数据结构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java String类深入理解</title>
    <link href="http://yoursite.com/2017/05/20/String%E7%B1%BB%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/05/20/String类深入理解/</id>
    <published>2017-05-20T12:01:02.957Z</published>
    <updated>2016-11-08T14:29:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>在这里主要说一些String类的细节，易忽略的点，以及面试题</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String s1=<span class="string">"abc;//s1是一个类类型变量，“abc"</span>是一个对象。</div><div class="line">s1=<span class="string">"ab"</span>;<span class="comment">//新建立了一个对象，s1指向这个对象，原来的"abc"还在堆内存中。</span></div><div class="line">String s2=<span class="keyword">new</span> String(<span class="string">"abc"</span>);<span class="comment">//不使用！建立了两个对象</span></div><div class="line">String s3=<span class="string">"abc"</span>;<span class="comment">//与s1共用一个对象，或者说s1,s3指向同一对象，不会再开辟空间。</span></div></pre></td></tr></table></figure>
<blockquote>
<p>字符串的最大特点：一旦被初始化就不可以改变。<br>字符串比较使用.equals()，不使用c语言的==。</p>
</blockquote>
<h2 id="用StringBuffer对字符串进行增删改查"><a href="#用StringBuffer对字符串进行增删改查" class="headerlink" title="用StringBuffer对字符串进行增删改查"></a>用StringBuffer对字符串进行增删改查</h2><h3 id="StringBuffer特点"><a href="#StringBuffer特点" class="headerlink" title="StringBuffer特点"></a>StringBuffer特点</h3><ol>
<li>长度是可变化的。</li>
<li>可以字节操作多个数据类型、</li>
<li>最终会通过toString方法变成字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">StringBuffer <span class="title">append</span><span class="params">()</span><span class="comment">//后面追加</span></span></div><div class="line">StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </div><div class="line">StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//删除某个字符</span></div><div class="line">StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">char</span> c)</span><span class="comment">//第二个参数有各种基础类型重载</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">char</span> ch)</span><span class="comment">//修改某个字符</span></div><div class="line">StringBuffer <span class="title">reverse</span><span class="params">()</span><span class="comment">//反转</span></div><div class="line">StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span><span class="comment">//替换</span></div><div class="line"><span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> <span class="comment">//尝试减少用于字符序列的存储空间。</span></div></pre></td></tr></table></figure>
<h2 id="使用StringBuilder代替StringBuffer"><a href="#使用StringBuilder代替StringBuffer" class="headerlink" title="使用StringBuilder代替StringBuffer"></a>使用StringBuilder代替StringBuffer</h2><p>在SDK1.5后出现了StringBuilder类（），使用方法和StringBuffer相同，开发时单线程使用StringBuilder，多线程使用StringBuffer提高开发效率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里主要说一些String类的细节，易忽略的点，以及面试题&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Markdown优雅的写博客</title>
    <link href="http://yoursite.com/2017/05/20/MarkdownPad/"/>
    <id>http://yoursite.com/2017/05/20/MarkdownPad/</id>
    <published>2017-05-20T12:01:02.951Z</published>
    <updated>2016-11-01T08:30:08.637Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于Windows10-MarkdownPad2"><a href="#基于Windows10-MarkdownPad2" class="headerlink" title="基于Windows10+MarkdownPad2"></a>基于Windows10+MarkdownPad2</h3><ul>
<li>首先登陆官网下载：<a href="http://markdownpad.com/" title="MarkdownPad" target="_blank" rel="external">http://markdownpad.com/</a>    选择windows系统</li>
</ul>
<a id="more"></a>
<ul>
<li><img src="http://i.imgur.com/uakFL31.png" alt=""></li>
<li>安装后打开，会提示使用，购买注册码，输入注册码，我们点击输入注册码（enter…)<img src="http://i.imgur.com/v6zsZLf.png" alt=""></li>
<li>输入邮箱：</li>
</ul>
<blockquote>
<p>Soar360@live.com</p>
</blockquote>
<ul>
<li>授权密钥：</li>
</ul>
<blockquote>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
</blockquote>
<ul>
<li><p>地址参见：<br><a href="http://w3cboy.com/post/2014/10/MarkdownPad%E6%B3%A8%E5%86%8C%E7%A0%81/" target="_blank" rel="external">http://w3cboy.com/post/2014/10/MarkdownPad%E6%B3%A8%E5%86%8C%E7%A0%81/</a></p>
</li>
<li><p>接下来就是配置了。首先Tools&gt;Options&gt;Editor里设置为中文 <img src="http://i.imgur.com/zY7qrYQ.png" alt=""></p>
</li>
<li>然后点击Markdown markdown处理器&gt;github风格处理器（在线时可以使语法高亮）<img src="http://i.imgur.com/PZCLrkC.png" alt=""></li>
<li>最后保存并关闭就大功告成了！</li>
<li>点击标题栏的按钮可以生成相应的语法格式，这里多说一点：代码块要实现语法高亮见以下图片：<img src="http://static.oschina.net/uploads/space/2013/0313/141201_mWZs_570724.png" alt=""></li>
</ul>
<hr>
<h2 id="—-EOF—"><a href="#—-EOF—" class="headerlink" title="—-EOF—-"></a>—-EOF—-</h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基于Windows10-MarkdownPad2&quot;&gt;&lt;a href=&quot;#基于Windows10-MarkdownPad2&quot; class=&quot;headerlink&quot; title=&quot;基于Windows10+MarkdownPad2&quot;&gt;&lt;/a&gt;基于Windows10+MarkdownPad2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先登陆官网下载：&lt;a href=&quot;http://markdownpad.com/&quot; title=&quot;MarkdownPad&quot;&gt;http://markdownpad.com/&lt;/a&gt;    选择windows系统&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Other" scheme="http://yoursite.com/categories/Other/"/>
    
    
      <category term="Other" scheme="http://yoursite.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Kali中文设置</title>
    <link href="http://yoursite.com/2017/05/20/Kali%E4%B8%AD%E6%96%87%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/05/20/Kali中文设置/</id>
    <published>2017-05-20T12:01:02.945Z</published>
    <updated>2017-05-20T12:06:33.444Z</updated>
    
    <content type="html"><![CDATA[<p>第一步：leafpad /etc/apt/sources.list</p>
<p>修改sources.list文件(etc/apt目录下）在下方加几个软件源</p>
<p>#官方源<br>deb <a href="http://http.kali.org/kali" target="_blank" rel="external">http://http.kali.org/kali</a> kali main non-free contrib<br>deb-src <a href="http://http.kali.org/kali" target="_blank" rel="external">http://http.kali.org/kali</a> kali main non-free contrib<br>deb <a href="http://security.kali.org/kali-security" target="_blank" rel="external">http://security.kali.org/kali-security</a> kali/updates main contrib non-free</p>
<p>#中科大kali源<br>deb <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali</a> kali main non-free contrib<br>deb-src <a href="http://mirrors.ustc.edu.cn/kali" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali</a> kali main non-free contrib<br>deb <a href="http://mirrors.ustc.edu.cn/kali-security" target="_blank" rel="external">http://mirrors.ustc.edu.cn/kali-security</a> kali/updates main contrib non-free</p>
<p>#阿里云kali源<br>deb <a href="http://mirrors.aliyun.com/kali" target="_blank" rel="external">http://mirrors.aliyun.com/kali</a> kali main non-free contrib<br>deb-src <a href="http://mirrors.aliyun.com/kali" target="_blank" rel="external">http://mirrors.aliyun.com/kali</a> kali main non-free contrib<br>deb <a href="http://mirrors.aliyun.com/kali-security" target="_blank" rel="external">http://mirrors.aliyun.com/kali-security</a> kali/updates main contrib non-free</p>
<p>保存。</p>
<p>第二步： 解决依赖关系。 apt-get install -f</p>
<p>第三步：apt-get update<br>apt-get upgrade</p>
<p>第四步：安装输入法. apt-get install ibus ibus-pinyin</p>
<p>第六步：重启.reboot</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一步：leafpad /etc/apt/sources.list&lt;/p&gt;
&lt;p&gt;修改sources.list文件(etc/apt目录下）在下方加几个软件源&lt;/p&gt;
&lt;p&gt;#官方源&lt;br&gt;deb &lt;a href=&quot;http://http.kali.org/kali&quot; tar
    
    </summary>
    
      <category term="Other" scheme="http://yoursite.com/categories/Other/"/>
    
    
      <category term="Other" scheme="http://yoursite.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>Java 泛型（Generic）学习</title>
    <link href="http://yoursite.com/2017/05/20/Java%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/05/20/Java泛型学习/</id>
    <published>2017-05-20T12:01:02.938Z</published>
    <updated>2016-11-11T09:37:12.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h2><p>泛型（Generic）：JDK以后出现的新特性。用于解决安全问题，是一个安全机制。</p>
<h3 id="使用泛型的好处"><a href="#使用泛型的好处" class="headerlink" title="使用泛型的好处"></a>使用泛型的好处</h3><ol>
<li>将运行时期出现的问题ClassCastException（类型转换错误）转移到了编译时期，方便于程序员解决问题。</li>
<li>避免了强制转换的麻烦</li>
</ol>
<a id="more"></a>
<h3 id="泛型格式"><a href="#泛型格式" class="headerlink" title="泛型格式"></a>泛型格式</h3><p>&lt;&gt;定义操作的引用数据类型</p>
<h3 id="为什么要写泛型？"><a href="#为什么要写泛型？" class="headerlink" title="为什么要写泛型？"></a>为什么要写泛型？</h3><blockquote>
<p>通常在集合中泛型很常见，只要有&lt;&gt;就要定义泛型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt;a1=<span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">a1.add(<span class="string">"asdasx"</span>);</div><div class="line">a1.add(<span class="string">"asdasxss"</span>);</div><div class="line">a1.add(<span class="string">"asdasxxxx"</span>);</div><div class="line">a1.add(<span class="number">4</span>);<span class="comment">//相当于a1.add(new Integer(4));ClassCastException错误</span></div><div class="line">Iterator&lt;String&gt;it=a1.iterator();</div></pre></td></tr></table></figure>
<p><em>对之前集合讲解的代码优化//Compareble也有泛型</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.TreeSet;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorByLength</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">			<span class="keyword">int</span> temp = s1.length()-s2.length();</div><div class="line">			<span class="keyword">return</span> temp==<span class="number">0</span>? s1.compareTo(s2): temp;</div><div class="line">			<span class="comment">//基础类型都有compareTo方法</span></div><div class="line">		&#125;</div><div class="line">	</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;String&gt;(<span class="keyword">new</span> ComparatorByLength());</div><div class="line"></div><div class="line">		ts.add(<span class="string">"aaaaa"</span>);</div><div class="line">		ts.add(<span class="string">"zz"</span>);</div><div class="line">		ts.add(<span class="string">"nbaq"</span>);</div><div class="line">		ts.add(<span class="string">"cba"</span>);</div><div class="line">		ts.add(<span class="string">"abc"</span>);</div><div class="line">		</div><div class="line">		Iterator&lt;String&gt; it = ts.iterator();</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">			System.out.println(it.next());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>当类中操作的引用类型不确定时<br>早期定义Object来完成扩展，现在定义泛型完成扩展<br>强转错误发生在编译时期更安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">public class Tool &#123;</div><div class="line"></div><div class="line">	private Object object;</div><div class="line"></div><div class="line">	public Object getObject() &#123;</div><div class="line">		return object;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setObject(Object object) &#123;</div><div class="line">		this.object = object;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;//JDK1.5以前定义Object来完成扩展</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> T t;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjects</span><span class="params">(T t)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.t=t;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getObjects</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>泛型类定义的泛型，在整个类中有效，如果被方法使用，那么泛型类的对象明确要操作的具体类型后，所有要操作的类型已经固定了。<br>为了让不同的方法可以操作不同的类型，而且类型还不确定，旧可以将泛型定义在方法上。</p>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><blockquote>
<p>public <t> void 方法名</t></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> T t;</div><div class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(t);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(E e)</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(e);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="特殊之处"><a href="#特殊之处" class="headerlink" title="特殊之处"></a>特殊之处</h3><ol>
<li>静态方法不可以访问类上定义的泛型。</li>
<li>静态类中也可以定义静态方法解决泛型类的局限性</li>
<li>如果静态方法操作的引用数据类型不确定，可以将泛型定义在方法上。</li>
<li>&lt;&gt;泛型放到返回值类型（int，void）的前面，修饰符（public，static）的后面<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> T t;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(t);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(E e)</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(e);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;W&gt; <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(W w)</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(w);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="泛型定义在接口上-不常见"><a href="#泛型定义在接口上-不常见" class="headerlink" title="泛型定义在接口上//不常见"></a>泛型定义在接口上//不常见</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">inteface Inter&lt;T&gt;</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//实现指定类型</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="title">implement</span> <span class="title">Inter</span>&lt;<span class="title">String</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String )</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(str);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//实现泛型类型</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span>&lt;<span class="title">T</span>&gt; <span class="title">implement</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span></div><div class="line">	&#123;</div><div class="line">		system.out.println(t);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="泛型的高级应用"><a href="#泛型的高级应用" class="headerlink" title="泛型的高级应用"></a>泛型的高级应用</h2><blockquote>
<p>有扩展性就有局限性</p>
</blockquote>
<h3 id="lt-gt-接收所有类型对象"><a href="#lt-gt-接收所有类型对象" class="headerlink" title="&lt;?&gt;:接收所有类型对象"></a>&lt;?&gt;:接收所有类型对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span><span class="params">(Collection&lt;?&gt; al)</span> </span>&#123;	</div><div class="line">	</div><div class="line">		Iterator&lt;?&gt; it = al.iterator();</div><div class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">		T str = it.next();</div><div class="line">		System.out.println(str);</div><div class="line">		System.out.println(it.next().toString());</div><div class="line">		<span class="comment">//it.next().length()不能打印，只能打印共有的父类方法</span></div><div class="line">		<span class="comment">//扩展的局限性体现在这</span></div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h3 id="lt-extends-E-gt-接收E类型或者E的子类型对象。上限！（用处较多）"><a href="#lt-extends-E-gt-接收E类型或者E的子类型对象。上限！（用处较多）" class="headerlink" title="&lt;? extends E&gt;:接收E类型或者E的子类型对象。上限！（用处较多）"></a>&lt;? extends E&gt;:接收E类型或者E的子类型对象。上限！（用处较多）</h3><blockquote>
<p>一般在存储元素的时候都是用上限，因为这样取出都是按照上限类型来运算的。不会出现类型安全隐患。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span><span class="params">(Collection&lt;? extends Person&gt; al)</span> </span></div><div class="line">&#123;</div><div class="line">		Iterator&lt;? extends Person&gt; it = al.iterator();<span class="comment">//接收Person及其子类</span></div><div class="line">		<span class="keyword">while</span>(it.hasNext())</div><div class="line">		&#123;</div><div class="line"><span class="comment">//			T str = it.next();不行，扩展的局限性</span></div><div class="line"><span class="comment">//			System.out.println(str);</span></div><div class="line"><span class="comment">//			System.out.println(it.next().toString());</span></div><div class="line">			Person p = it.next();</div><div class="line">			System.out.println(p.getName()+<span class="string">":"</span>+p.getAge());</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCollection</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Student&gt; al)</span></span></div><div class="line">	&#123;</div><div class="line">		Iterator&lt;? <span class="keyword">super</span> Student&gt; it = al.iterator();</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(it.hasNext())</div><div class="line">		&#123;</div><div class="line">			System.out.println(it.next());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="lt-super-E-gt-：接收E类型或者E的父类型对象。下限！（用处较少）"><a href="#lt-super-E-gt-：接收E类型或者E的父类型对象。下限！（用处较少）" class="headerlink" title="&lt;? super E&gt;：接收E类型或者E的父类型对象。下限！（用处较少）"></a>&lt;? super E&gt;：接收E类型或者E的父类型对象。下限！（用处较少）</h3><p>什么时候用下限呢？通常对集合中的元素进行取出操作时，可以是用下限。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">		<span class="comment">/*Student,Worker均为Person的子类*/</span></div><div class="line">		TreeSet&lt;Person&gt; al1 = <span class="keyword">new</span> TreeSet&lt;Person&gt;(<span class="keyword">new</span> CompByName());</div><div class="line">		</div><div class="line">		al1.add(<span class="keyword">new</span> Person(<span class="string">"abc4"</span>,<span class="number">34</span>));</div><div class="line">		al1.add(<span class="keyword">new</span> Person(<span class="string">"abc1"</span>,<span class="number">30</span>));</div><div class="line">		al1.add(<span class="keyword">new</span> Person(<span class="string">"abc2"</span>,<span class="number">38</span>));</div><div class="line">		</div><div class="line">		TreeSet&lt;Student&gt; al2 = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> CompByName());</div><div class="line">		</div><div class="line">		al2.add(<span class="keyword">new</span> Student(<span class="string">"stu1"</span>,<span class="number">11</span>));</div><div class="line">		al2.add(<span class="keyword">new</span> Student(<span class="string">"stu7"</span>,<span class="number">20</span>));</div><div class="line">		al2.add(<span class="keyword">new</span> Student(<span class="string">"stu2"</span>,<span class="number">22</span>));</div><div class="line">		</div><div class="line">		</div><div class="line">		TreeSet&lt;Worker&gt; al3 = <span class="keyword">new</span> TreeSet&lt;Worker&gt;(<span class="keyword">new</span> CompByName());</div><div class="line">		</div><div class="line">		al3.add(<span class="keyword">new</span> Worker(<span class="string">"stu1"</span>,<span class="number">11</span>));</div><div class="line">		al3.add(<span class="keyword">new</span> Worker(<span class="string">"stu2"</span>,<span class="number">22</span>));</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompByName</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Person</span>&gt;//&lt;? <span class="title">super</span> <span class="title">E</span>&gt;</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> temp = o1.getName().compareTo(o2.getName());</div><div class="line">		</div><div class="line">		<span class="keyword">return</span> temp==<span class="number">0</span>? o1.getAge()-o2.getAge():temp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是泛型&quot;&gt;&lt;a href=&quot;#什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型&quot;&gt;&lt;/a&gt;什么是泛型&lt;/h2&gt;&lt;p&gt;泛型（Generic）：JDK以后出现的新特性。用于解决安全问题，是一个安全机制。&lt;/p&gt;
&lt;h3 id=&quot;使用泛型的好处&quot;&gt;&lt;a href=&quot;#使用泛型的好处&quot; class=&quot;headerlink&quot; title=&quot;使用泛型的好处&quot;&gt;&lt;/a&gt;使用泛型的好处&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将运行时期出现的问题ClassCastException（类型转换错误）转移到了编译时期，方便于程序员解决问题。&lt;/li&gt;
&lt;li&gt;避免了强制转换的麻烦&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程的学习</title>
    <link href="http://yoursite.com/2017/05/20/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/05/20/Java多线程学习/</id>
    <published>2017-05-20T12:01:02.931Z</published>
    <updated>2016-11-08T14:17:03.633Z</updated>
    
    <content type="html"><![CDATA[<p>进程：正在执行的程序，有一个执行顺序，顺序是一个执行路径， 或者叫控制单元<br>线程：进程中独立的控制单元，至少有一个<br>JAVA vm 启动时有一个进程java.exe<br>至少有一个线程存在main函数中叫主线程。</p>
<blockquote>
<p>jvm 启动不只一个线程，还有负责垃圾回收处理机制的线程。</p>
</blockquote>
<a id="more"></a>
<h2 id="java-lang-Thread"><a href="#java-lang-Thread" class="headerlink" title="java.lang.Thread"></a>java.lang.Thread</h2><ol>
<li>创建线程第一种方式是继承Thread</li>
<li>并复写run()方法（目的是将自定义的代码存储在run()方法中）</li>
<li>调用改线程的start()方法（因为对象.run()仅仅是调用方法，线程创建了，并没有运行）</li>
</ol>
<h2 id="多线程具有随机性"><a href="#多线程具有随机性" class="headerlink" title="多线程具有随机性"></a>多线程具有随机性</h2><p>多个线程获取cpu的执行权，每一个时间只能一个程序占用cpu（多核除外）</p>
<ul>
<li>几种状态sleep(),wait(),notify(),stop(),和一个特殊状态：阻塞–<em>具备运行资格，但没有执行权</em></li>
<li><img src="http://i.imgur.com/je9JJLi.png" alt=""></li>
</ul>
<h2 id="线程名称"><a href="#线程名称" class="headerlink" title="线程名称"></a>线程名称</h2><p>默认名称为Thread-编号<br>.getName()获得线程名称，.setName()设置线程名称，Thread.currentThread()获得当前线程</p>
<h2 id="java-lang-Runnable接口"><a href="#java-lang-Runnable接口" class="headerlink" title="java.lang.Runnable接口"></a>java.lang.Runnable接口</h2><ol>
<li>创建线程第二种方式 实现Runnable方法</li>
<li>覆盖Runnable接口的run方法</li>
<li>通过Thread类建立线程对象</li>
<li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数</li>
<li>调用Thread类的static方法开启线程并调用Runnable接口子类的run方法</li>
</ol>
<blockquote>
<p>实现相比第一种方式的好处： Runnable避免了单继承的局限性，在定义线程时，尽量使用接口实现的方式。<br>区别：继承线程代码存放在Thread子类的run方法中<br>实现Runnable线程代码存放在接口子类的run方法中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="comment">//do something</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">	&#123;</div><div class="line">		Ticket t= <span class="keyword">new</span> Ticket();</div><div class="line">		Thread t1=<span class="keyword">new</span> Thread(t);</div><div class="line">		Thread t2=<span class="keyword">new</span> Thread(t);</div><div class="line">		t1.start();</div><div class="line">		t1.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多线程安全问题"><a href="#多线程安全问题" class="headerlink" title="多线程安全问题"></a>多线程安全问题</h2><p>–1.<em>使用同步代码块</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(对象)&#123;</div><div class="line">	<span class="comment">//需要被同步的代码块</span></div><div class="line">	<span class="comment">//只能有一个线程进入，执行完之后才能进下一个进程</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>好处：解决了多线程的安全问题<br>弊端：多个线程都需要判断锁，较为消耗资源</p>
</blockquote>
<p>–2.<em>同步函数</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>同步函数使用的锁是哪一个？<br>–<em>函数需要被对象调用，那函数都有一个所属对象的引用，就是this。</em></li>
<li>如果同步函数被静态修饰后用的锁不是this，尤为静态方法中没有this<ul>
<li>静态进内存时，内存中没有本类对象，但是一定有该类对应的字节码文件对象。类名.class 该类的类型是Class(静态同步方法)<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span>(类名.class)</div><div class="line">&#123;</div><div class="line">	<span class="comment">//需要被同步的代码块</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="comment">//do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>–3.<em>防止死锁</em></p>
<blockquote>
<p>多线程使用同一个锁，防止互相嵌套</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span>  <span class="keyword">int</span> num = <span class="number">100</span>;</div><div class="line">	Object obj = <span class="keyword">new</span> Object();</div><div class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">synchronized</span>(obj)</div><div class="line">				&#123;</div><div class="line">					show();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">				<span class="keyword">this</span>.show();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line"></div><div class="line">		<span class="keyword">synchronized</span>(obj)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(num&gt;<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span> (InterruptedException e)&#123;&#125;</div><div class="line">				</div><div class="line">				System.out.println(Thread.currentThread().getName()+<span class="string">".....sale...."</span>+num--);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		Ticket t = <span class="keyword">new</span> Ticket();</div><div class="line"><span class="comment">//		System.out.println("t:"+t);</span></div><div class="line"></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(t);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(t);</div><div class="line"></div><div class="line">		t1.start();</div><div class="line">		<span class="keyword">try</span>&#123;Thread.sleep(<span class="number">10</span>);&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</div><div class="line">		t.flag = <span class="keyword">false</span>;</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p>–<em>多个线程操作统一资源，但操作动作不同</em></p>
<h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><p>–<em>涉及的方法</em>：</p>
<p>1，wait(): 让线程处于冻结状态，被wait的线程会被存储到线程池中。<br>2，notify():唤醒线程池中一个线程(任意).<br>3，notifyAll():唤醒线程池中的所有线程。</p>
<p>这些方法都必须定义在同步中。</p>
<blockquote>
<p>因为这些方法是用于操作线程状态的方法。<br>必须要明确到底操作的是哪个锁上的线程。</p>
</blockquote>
<p>为什么操作线程的方法wait notify notifyAll定义在了Object类中？ </p>
<blockquote>
<p>因为这些方法是监视器的方法。监视器其实就是锁。<br>锁可以是任意的对象，任意的对象调用的方式一定定义在Object类中。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> String sex;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name,String sex)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(flag)</div><div class="line">			<span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.sex = sex;</div><div class="line">		flag = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">this</span>.notify();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!flag)</div><div class="line">			<span class="keyword">try</span>&#123;<span class="keyword">this</span>.wait();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</div><div class="line">		System.out.println(name+<span class="string">"...+...."</span>+sex);</div><div class="line">		flag = <span class="keyword">false</span>;</div><div class="line">		notify();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输入</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	Resource r ;</div><div class="line"><span class="comment">//	Object obj = new Object();</span></div><div class="line">	Input(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> x = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(x==<span class="number">0</span>)</div><div class="line">			&#123;</div><div class="line">				r.set(<span class="string">"mike"</span>,<span class="string">"nan"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				r.set(<span class="string">"丽丽"</span>,<span class="string">"女女女女女女"</span>);</div><div class="line">			&#125;</div><div class="line">			x = (x+<span class="number">1</span>)%<span class="number">2</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;<span class="comment">//输出</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	Resource r;</div><div class="line"><span class="comment">//	Object obj = new Object();</span></div><div class="line">	Output(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			r.out();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ResourceDemo3</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//创建资源。</span></div><div class="line">		Resource r = <span class="keyword">new</span> Resource();</div><div class="line">		<span class="comment">//创建任务。</span></div><div class="line">		Input in = <span class="keyword">new</span> Input(r);</div><div class="line">		Output out = <span class="keyword">new</span> Output(r);</div><div class="line">		<span class="comment">//创建线程，执行路径。</span></div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(in);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(out);</div><div class="line">		<span class="comment">//开启线程</span></div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多于两个线程的进程间通信"><a href="#多于两个线程的进程间通信" class="headerlink" title="多于两个线程的进程间通信"></a>多于两个线程的进程间通信</h2><p>–自我理解：将两个线程的if(flag)改为while(flag)【让唤醒的线程再一次判断标记】,notify()改为notifyAll()【notify()可能只会唤醒本方线程（导致所有线程等待）】</p>
<blockquote>
<p>notify()往往唤醒的是线程池中的第一个，所以用flag标记和notifyAll()配合使用解决。</p>
</blockquote>
<h2 id="JDK1-5后新特性lock"><a href="#JDK1-5后新特性lock" class="headerlink" title="JDK1.5后新特性lock"></a>JDK1.5后新特性lock</h2><p>–jdk1.5以后将同步和锁封装成了对象。<br>并将操作锁的隐式方式定义到了该对象中，<br>将隐式动作变成了显示动作。</p>
<blockquote>
<p>Lock接口(替代synchronized)： 出现替代了同步代码块或者同步函数。</p>
</blockquote>
<p>将同步的隐式锁操作变成现实锁操作。同时更为灵活。可以一个锁上加上多组监视器。</p>
<blockquote>
<p>Condition接口：出现替代了Object中的wait notify notifyAll方法。</p>
</blockquote>
<p>将这些监视器方法单独进行了封装，变成Condition监视器对象。可以使用多个condition与任意锁进行组合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lock();<span class="comment">//获取锁。</span></div><div class="line">unlock();<span class="comment">//释放锁，通常需要定义finally代码块中。</span></div><div class="line"></div><div class="line">await();<span class="comment">//替代wait()</span></div><div class="line">signal();<span class="comment">//替代notify();</span></div><div class="line">signalAll();<span class="comment">//替代notifyAll();</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line"><span class="comment">//	创建一个锁对象。</span></div><div class="line">	Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">	<span class="comment">//通过已有的锁获取该锁上的监视器对象。</span></div><div class="line"><span class="comment">//	Condition con = lock.newCondition();</span></div><div class="line"></div><div class="line">	<span class="comment">//通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者。</span></div><div class="line">	Condition producer_con = lock.newCondition();</div><div class="line">	Condition consumer_con = lock.newCondition();</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">(String name)</span><span class="comment">//  t0 t1</span></span></div><div class="line">	&#123;</div><div class="line">		lock.lock();</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span>(flag)</div><div class="line"><span class="comment">//			try&#123;lock.wait();&#125;catch(InterruptedException e)&#123;&#125;//   t1    t0</span></div><div class="line">			<span class="keyword">try</span>&#123;producer_con.await();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;<span class="comment">//   t1    t0</span></div><div class="line">		</div><div class="line">			<span class="keyword">this</span>.name = name + count;<span class="comment">//烤鸭1  烤鸭2  烤鸭3</span></div><div class="line">			count++;<span class="comment">//2 3 4</span></div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...生产者5.0..."</span>+<span class="keyword">this</span>.name);<span class="comment">//生产烤鸭1 生产烤鸭2 生产烤鸭3</span></div><div class="line">			flag = <span class="keyword">true</span>;</div><div class="line"><span class="comment">//			notifyAll();</span></div><div class="line"><span class="comment">//			con.signalAll();</span></div><div class="line">			consumer_con.signal();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span></div><div class="line">		&#123;</div><div class="line">			lock.unlock();<span class="comment">//finally用来释放资源</span></div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span><span class="comment">// t2 t3</span></span></div><div class="line">	&#123;</div><div class="line">		lock.lock();</div><div class="line">		<span class="keyword">try</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">while</span>(!flag)</div><div class="line"><span class="comment">//			try&#123;this.wait();&#125;catch(InterruptedException e)&#123;&#125;	//t2  t3</span></div><div class="line">			<span class="keyword">try</span>&#123;cousumer_con.await();&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;	<span class="comment">//t2  t3</span></div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"...消费者.5.0......."</span>+<span class="keyword">this</span>.name);<span class="comment">//消费烤鸭1</span></div><div class="line">			flag = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//			notifyAll();</span></div><div class="line"><span class="comment">//			con.signalAll();</span></div><div class="line">			producer_con.signal();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span></div><div class="line">		&#123;</div><div class="line">			lock.unlock();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Resource r;</div><div class="line">	Producer(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			r.set(<span class="string">"烤鸭"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Resource r;</div><div class="line">	Consumer(Resource r)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.r = r;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</div><div class="line">		&#123;</div><div class="line">			r.out();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ProducerConsumerDemo2</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		Resource r = <span class="keyword">new</span> Resource();</div><div class="line">		Producer pro = <span class="keyword">new</span> Producer(r);</div><div class="line">		Consumer con = <span class="keyword">new</span> Consumer(r);</div><div class="line"></div><div class="line">		Thread t0 = <span class="keyword">new</span> Thread(pro);</div><div class="line">		Thread t1 = <span class="keyword">new</span> Thread(pro);</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(con);</div><div class="line">		Thread t3 = <span class="keyword">new</span> Thread(con);</div><div class="line">		t0.start();</div><div class="line">		t1.start();</div><div class="line">		t2.start();</div><div class="line">		t3.start();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多线程总结"><a href="#多线程总结" class="headerlink" title="多线程总结"></a>多线程总结</h2><h3 id="1，进程和线程的概念。"><a href="#1，进程和线程的概念。" class="headerlink" title="1，进程和线程的概念。"></a>1，进程和线程的概念。</h3><pre><code>|--进程：
|--线程：
</code></pre><h3 id="2，jvm中的多线程体现。"><a href="#2，jvm中的多线程体现。" class="headerlink" title="2，jvm中的多线程体现。"></a>2，jvm中的多线程体现。</h3><pre><code>|--主线程，垃圾回收线程，自定义线程。以及他们运行的代码的位置。
</code></pre><h3 id="3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？"><a href="#3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？" class="headerlink" title="3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？"></a>3，什么时候使用多线程，多线程的好处是什么？创建线程的目的？</h3><pre><code>|--当需要多部分代码同时执行的时候，可以使用。
</code></pre><h3 id="4，创建线程的两种方式。★★★★★"><a href="#4，创建线程的两种方式。★★★★★" class="headerlink" title="4，创建线程的两种方式。★★★★★"></a>4，创建线程的两种方式。★★★★★</h3><pre><code>|--继承Thread
    |--步骤
|--实现Runnable
    |--步骤
|--两种方式的区别？
</code></pre><h3 id="5，线程的5种状态。"><a href="#5，线程的5种状态。" class="headerlink" title="5，线程的5种状态。"></a>5，线程的5种状态。</h3><pre><code>对于执行资格和执行权在状态中的具体特点。
|--被创建：
|--运行：
|--冻结：
|--临时阻塞：
|--消亡：
</code></pre><h3 id="6，线程的安全问题。★★★★★"><a href="#6，线程的安全问题。★★★★★" class="headerlink" title="6，线程的安全问题。★★★★★"></a>6，线程的安全问题。★★★★★</h3><pre><code>|--安全问题的原因：
|--解决的思想：
|--解决的体现：synchronized
|--同步的前提：但是加上同步还出现安全问题，就需要用前提来思考。
|--同步的两种表现方法和区别：
|--同步的好处和弊端：
|--单例的懒汉式。
|--死锁。
</code></pre><h3 id="7，线程间的通信。等待-唤醒机制。"><a href="#7，线程间的通信。等待-唤醒机制。" class="headerlink" title="7，线程间的通信。等待/唤醒机制。"></a>7，线程间的通信。等待/唤醒机制。</h3><pre><code>|--概念：多个线程，不同任务，处理同一资源。 
|--等待唤醒机制。使用了锁上的 wait notify notifyAll.  ★★★★★
|--生产者/消费者的问题。并多生产和多消费的问题。  while判断标记。用notifyAll唤醒对方。 ★★★★★
|--JDK1.5以后出现了更好的方案，★★★
    Lock接口替代了synchronized  
    Condition接口替代了Object中的监视方法，并将监视器方法封装成了Condition
    和以前不同的是，以前一个锁上只能有一组监视器方法。现在，一个Lock锁上可以多组监视器方法对象。
    可以实现一组负责生产者，一组负责消费者。 
|--wait和sleep的区别。★★★★★
</code></pre><h3 id="8，停止线程的方式。"><a href="#8，停止线程的方式。" class="headerlink" title="8，停止线程的方式。"></a>8，停止线程的方式。</h3><pre><code>|--原理：.interrupt()//将线程从冻结状态强制恢复到运行状态中来
|--表现：--中断。
</code></pre><h3 id="9，线程常见的一些方法。"><a href="#9，线程常见的一些方法。" class="headerlink" title="9，线程常见的一些方法。"></a>9，线程常见的一些方法。</h3><pre><code>|--.setDaemon(true)//后台进程，主线程结束后自动结束
|--.join();//获取cpu执行权，此时主线程冻结至该线程结束
|--.setPriority(Thread.MAX_PRIORITY);//设定优先级
|--.yield();//释放执行权，不常用
|--在开发时，可以使用匿名内部类来完成局部的路径开辟。 
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程：正在执行的程序，有一个执行顺序，顺序是一个执行路径， 或者叫控制单元&lt;br&gt;线程：进程中独立的控制单元，至少有一个&lt;br&gt;JAVA vm 启动时有一个进程java.exe&lt;br&gt;至少有一个线程存在main函数中叫主线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jvm 启动不只一个线程，还有负责垃圾回收处理机制的线程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java单例设计模式</title>
    <link href="http://yoursite.com/2017/05/20/Java%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/05/20/Java单例设计模式/</id>
    <published>2017-05-20T12:01:02.922Z</published>
    <updated>2016-11-08T14:30:03.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>单例设计模式 懒汉式/饿汉式</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span>//懒汉式的（多线程）安全定义方法（面试常考）</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Single s=<span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(a==<span class="keyword">null</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">synchronized</span>(Single.class)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(s==<span class="keyword">null</span>)</div><div class="line">					s=<span class="keyword">new</span> Single();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">&#125;<span class="comment">//懒汉式用于延迟加载</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span>//饿汉式（开发中常用）</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single s=<span class="keyword">new</span> Single();</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单例设计模式 懒汉式/饿汉式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/20/hello-world/"/>
    <id>http://yoursite.com/2017/05/20/hello-world/</id>
    <published>2017-05-20T12:01:02.914Z</published>
    <updated>2016-11-01T06:28:31.940Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://yoursite.com/categories/Other/"/>
    
    
      <category term="Other" scheme="http://yoursite.com/tags/Other/"/>
    
  </entry>
  
</feed>
